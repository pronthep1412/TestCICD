# ios/fastlane/Fastfile - Improved version
default_platform(:ios)

platform :ios do
  
  before_all do
    setup_circle_ci if ENV['CI']
    ensure_bundle_exec
  end

  # Lane สำหรับ develop branch
  lane :deploy_develop do
    build_and_deploy(
      groups: ["Internal Testers", "Developers"],
      skip_waiting: true
    )
    
    notify_slack("🚀 iOS Development build uploaded to TestFlight Internal!")
  end

  # Lane สำหรับ preprod branch
  lane :deploy_preprod do
    build_and_deploy(
      groups: ["Beta Testers", "QA Team"],
      skip_waiting: false
    )
    
    notify_slack("🚀 iOS Pre-production build uploaded to TestFlight Beta!")
  end

  # Lane สำหรับ master branch (Production)
  lane :deploy_master do
    setup_certificates
    build_release_app
    
    upload_to_app_store(
      force: true,
      submit_for_review: true,
      automatic_release: false,
      submission_information: submission_info
    )
    
    notify_slack("🎉 iOS Production build submitted to App Store for review!")
  end

  # Lane สำหรับ build เฉยๆ
  lane :build_only do
    setup_certificates
    build_release_app
  end

  # Lane สำหรับ promote build ที่มีอยู่แล้ว
  lane :promote_to_app_store do
    upload_to_app_store(
      skip_binary_upload: true,
      submit_for_review: true,
      automatic_release: false,
      force: true
    )
    
    notify_slack("📋 iOS build promoted and submitted for App Store review!")
  end

  # Private lanes
  private_lane :setup_certificates do
    match(
      type: "appstore",
      readonly: true
    )
  end

  private_lane :build_release_app do
    build_app(
      scheme: "TestCICD",
      workspace: "TestCICD.xcworkspace",
      configuration: "Release",
      export_method: "app-store",
      clean: true,
      output_directory: "./build",
      output_name: "TestCICD.ipa",
      include_bitcode: false
    )
  end

  private_lane :build_and_deploy do |options|
    setup_certificates
    build_release_app
    
    upload_to_testflight(
      skip_waiting_for_build_processing: options[:skip_waiting],
      groups: options[:groups]
    )
  end

  private_lane :notify_slack do |message|
    if ENV["SLACK_URL"]
      slack(
        message: message,
        channel: "#releases"
      )
    end
  end

  private_lane :submission_info do
    {
      add_id_info_limits_tracking: true,
      add_id_info_serves_ads: false,
      add_id_info_tracks_action: true,
      add_id_info_tracks_install: true,
      add_id_info_uses_idfa: true,
      content_rights_has_rights: true,
      content_rights_contains_third_party_content: true,
      export_compliance_platform: 'ios',
      export_compliance_compliance_required: false,
      export_compliance_encryption_updated: false,
      export_compliance_uses_encryption: false,
      export_compliance_is_exempt: false,
      export_compliance_contains_third_party_cryptography: false,
      export_compliance_contains_proprietary_cryptography: false,
      export_compliance_available_on_french_store: false
    }
  end

  # Error handling
  error do |lane, exception|
    notify_slack("❌ iOS deployment failed in lane '#{lane}': #{exception.message}")
  end
end