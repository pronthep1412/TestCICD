# cd.yml - Optimized Continuous Deployment with Bundle Sharing
name: Continuous Deployment

on:
  push:
    branches:
      - master
      - develop
      - preprod

env:
  NODE_VERSION: 22.11.0  # üîÑ Updated to match other workflows

jobs:
  # Common setup, testing, and bundle creation (similar to ci.yml but for CD)
  setup-test-and-prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_code: ${{ steps.version.outputs.version_code }}
      branch: ${{ steps.branch.outputs.name }}
      is_production: ${{ steps.branch.outputs.is_production }}
      cache_key: ${{ steps.cache-deps.outputs.cache-primary-key }}
      coverage: ${{ steps.coverage.outputs.percentage }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4  # üîÑ Updated from v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      # üöÄ Enhanced dependency caching
      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
            ~/.npm
          key: ${{ runner.os }}-deps-${{ hashFiles('yarn.lock') }}-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ hashFiles('yarn.lock') }}
            ${{ runner.os }}-deps-

      - name: Install Dependencies
        run: |
          yarn install --frozen-lockfile --prefer-offline
          echo "‚úÖ Dependencies installed: $(du -sh node_modules | cut -f1)"

      # Quality Checks (keeping existing logic)
      - name: Code Linting
        run: yarn lint

      - name: Type Checking
        run: yarn type-check

      # üÜï Enhanced security audit
      - name: Security Audit
        run: |
          echo "## üîç Security Audit Results" >> $GITHUB_STEP_SUMMARY
          if yarn audit --audit-level moderate --json > audit-results.json 2>/dev/null; then
            echo "‚úÖ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Security vulnerabilities detected - check logs for details" >> $GITHUB_STEP_SUMMARY
            yarn audit --audit-level moderate || true
          fi

      - name: Unit & Integration Tests with Coverage
        run: yarn test:ci

      # üÜï Extract coverage for reporting
      - name: Extract Coverage Percentage
        id: coverage
        run: |
          COVERAGE="0"
          
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -p "
              try {
                const summary = JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json'));
                summary.total.lines.pct || 0;
              } catch(e) { 0; }
            " 2>/dev/null || echo "0")
          fi
          
          # Validate ‡πÅ‡∏•‡∏∞ fallback
          if ! echo "$COVERAGE" | grep -q '^[0-9]*\.*[0-9]*$'; then
            COVERAGE="0"
          fi
          
          if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "" ]; then
            COVERAGE="0"
          fi
          
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"

      - name: Set Branch Info
        id: branch
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "is_production=$([[ '$BRANCH_NAME' == 'master' ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "Branch: $BRANCH_NAME (Production: $([[ '$BRANCH_NAME' == 'master' ]] && echo 'Yes' || echo 'No'))"

      - name: Generate Version and Version Code
        id: version
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RUN_NUMBER=${{ github.run_number }}
          
          # Generate version name
          if [ "$BRANCH_NAME" = "master" ]; then
            VERSION="$PACKAGE_VERSION"
            BASE_CODE=2000000
          elif [ "$BRANCH_NAME" = "preprod" ]; then
            VERSION="$PACKAGE_VERSION-beta.$RUN_NUMBER"
            BASE_CODE=1500000
          else
            VERSION="$PACKAGE_VERSION-alpha.$RUN_NUMBER"
            BASE_CODE=1000000
          fi
          
          # Generate unique version code
          VERSION_CODE=$((BASE_CODE + RUN_NUMBER))
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION (code: $VERSION_CODE)"

      # üÜï Create JS bundles for sharing (same as ci.yml)
      - name: Create JS Bundles for Sharing
        run: |
          echo "üì¶ Creating JavaScript bundles for deployment..."
          
          # Android bundle
          mkdir -p bundles/android
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output bundles/android/index.android.bundle \
            --assets-dest bundles/android/assets/ \
            --minify true
          
          # iOS bundle  
          mkdir -p bundles/ios
          npx react-native bundle \
            --platform ios \
            --dev false \
            --entry-file index.js \
            --bundle-output bundles/ios/main.jsbundle \
            --assets-dest bundles/ios/assets/ \
            --minify true
          
          echo "‚úÖ Bundles created successfully"

      # üÜï Upload bundles for builds
      - name: Upload Android Bundle
        uses: actions/upload-artifact@v4
        with:
          name: cd-js-bundle-android-${{ github.run_number }}
          path: bundles/android/
          retention-days: 1

      - name: Upload iOS Bundle
        uses: actions/upload-artifact@v4
        with:
          name: cd-js-bundle-ios-${{ github.run_number }}
          path: bundles/ios/
          retention-days: 1

      # üÜï Coverage and test reports
      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cd-coverage-reports-${{ github.run_number }}
          path: |
            coverage/
            jest-coverage/
          retention-days: 7

      # üÜï Build summary
      - name: Setup Summary
        run: |
          echo "## üöÄ Continuous Deployment - Setup Phase" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ steps.branch.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ steps.version.outputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Production:** ${{ steps.branch.outputs.is_production }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage:** ${{ steps.coverage.outputs.percentage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Completed Tasks" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies installed and cached" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- Unit tests completed" >> $GITHUB_STEP_SUMMARY
          echo "- JS bundles created and uploaded" >> $GITHUB_STEP_SUMMARY

  # üÜï Bundle analysis (same as ci.yml)
  bundle-analysis:
    needs: setup-test-and-prepare
    runs-on: ubuntu-latest
    timeout-minutes: 5
    continue-on-error: true
    
    steps:
      - name: Download Android Bundle
        uses: actions/download-artifact@v4
        with:
          name: cd-js-bundle-android-${{ github.run_number }}
          path: ./bundle-check/

      - name: Bundle Size Analysis
        run: |
          echo "## üì¶ Production Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "./bundle-check/index.android.bundle" ]; then
            bundle_size=$(ls -lh ./bundle-check/index.android.bundle | awk '{print $5}')
            bundle_bytes=$(wc -c < ./bundle-check/index.android.bundle)
            
            echo "- **‚úÖ Bundle Analysis:** Completed" >> $GITHUB_STEP_SUMMARY
            echo "- **Android Bundle Size:** $bundle_size" >> $GITHUB_STEP_SUMMARY
            
            # Size evaluation with stricter production standards
            if [ "$bundle_bytes" -lt 1048576 ]; then
              echo "- **üìä Size Status:** ‚úÖ Excellent (< 1MB)" >> $GITHUB_STEP_SUMMARY
            elif [ "$bundle_bytes" -lt 3145728 ]; then
              echo "- **üìä Size Status:** ‚úÖ Good (< 3MB)" >> $GITHUB_STEP_SUMMARY
            elif [ "$bundle_bytes" -lt 5242880 ]; then
              echo "- **üìä Size Status:** ‚ö†Ô∏è Large (< 5MB)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **üìä Size Status:** ‚ùå Too Large (> 5MB) - Consider optimization" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **‚ö†Ô∏è Bundle Analysis:** Bundle file not found" >> $GITHUB_STEP_SUMMARY
          fi

  # Create release tag (moved down and enhanced)
  create-release-tag:
    needs: [setup-test-and-prepare, bundle-analysis]
    if: needs.setup-test-and-prepare.outputs.is_production == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and Push Release Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          TAG_NAME="v${{ needs.setup-test-and-prepare.outputs.version }}"
          
          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Tag $TAG_NAME already exists, skipping..."
          else
            git tag -a "$TAG_NAME" -m "Production release $TAG_NAME"
            git push origin "$TAG_NAME"
            echo "‚úÖ Created and pushed tag: $TAG_NAME"
          fi

  # Android deployment with optimization
  deploy-android:
    needs: setup-test-and-prepare
    uses: ./.github/workflows/android-build.yml
    with:
      environment: 'release'
      publish: true
      version: ${{ needs.setup-test-and-prepare.outputs.version }}
      version_code: ${{ needs.setup-test-and-prepare.outputs.version_code }}
      branch: ${{ needs.setup-test-and-prepare.outputs.branch }}
      # üÜï Pass optimizations
      cache_key: ${{ needs.setup-test-and-prepare.outputs.cache_key }}
      js_bundle_artifact: cd-js-bundle-android-${{ github.run_number }}
    secrets: inherit

  # iOS deployment with optimization
  deploy-ios:
    needs: setup-test-and-prepare
    uses: ./.github/workflows/ios-build.yml
    with:
      environment: 'release'
      publish: true
      version: ${{ needs.setup-test-and-prepare.outputs.version }}
      version_code: ${{ needs.setup-test-and-prepare.outputs.version_code }}
      branch: ${{ needs.setup-test-and-prepare.outputs.branch }}
      # üÜï Pass optimizations
      cache_key: ${{ needs.setup-test-and-prepare.outputs.cache_key }}
      js_bundle_artifact: cd-js-bundle-ios-${{ github.run_number }}
    secrets: inherit

  # Production deployment with manual approval (enhanced)
  finalize-production-release:
    if: needs.setup-test-and-prepare.outputs.is_production == 'true'
    needs: [setup-test-and-prepare, deploy-android, deploy-ios, create-release-tag, bundle-analysis]
    runs-on: ubuntu-latest
    environment: production  # This triggers manual approval
    
    steps:
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.setup-test-and-prepare.outputs.version }}
          release_name: 'Production Release v${{ needs.setup-test-and-prepare.outputs.version }}'
          body: |
            ## üöÄ Production Release v${{ needs.setup-test-and-prepare.outputs.version }}
            
            ### üìã Release Information
            - **Version:** v${{ needs.setup-test-and-prepare.outputs.version }}
            - **Version Code:** ${{ needs.setup-test-and-prepare.outputs.version_code }}
            - **Branch:** ${{ needs.setup-test-and-prepare.outputs.branch }}
            - **Deployed by:** ${{ github.actor }}
            - **Commit:** ${{ github.sha }}
            - **Test Coverage:** ${{ needs.setup-test-and-prepare.outputs.coverage }}%
            
            ### ‚úÖ Quality Checks Passed
            - Code linting and type checking
            - Unit and integration tests
            - Security audit
            - Bundle size analysis
            
            ### üì± Platform Deployments
            - **Android:** ${{ needs.deploy-android.result == 'success' && '‚úÖ Deployed to Google Play' || '‚ùå Failed' }}
            - **iOS:** ${{ needs.deploy-ios.result == 'success' && '‚úÖ Deployed to App Store' || '‚ùå Failed' }}
            
            ### üîó Links
            - [Commit Details](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Production Release Summary
        run: |
          echo "## üéâ Production Release Completed" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** v${{ needs.setup-test-and-prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Deploy:** ${{ needs.deploy-android.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS Deploy:** ${{ needs.deploy-ios.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release:** ‚úÖ Created" >> $GITHUB_STEP_SUMMARY

  # üÜï Deployment summary for all branches
  deployment-summary:
    needs: [setup-test-and-prepare, deploy-android, deploy-ios, bundle-analysis]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## üöÄ Continuous Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ needs.setup-test-and-prepare.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.setup-test-and-prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ needs.setup-test-and-prepare.outputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Coverage:** ${{ needs.setup-test-and-prepare.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìä Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Setup & Tests:** ${{ needs.setup-test-and-prepare.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Analysis:** ${{ needs.bundle-analysis.result == 'success' && '‚úÖ Completed' || '‚ö†Ô∏è Partial' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Deploy:** ${{ needs.deploy-android.result == 'success' && '‚úÖ Success' || needs.deploy-android.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS Deploy:** ${{ needs.deploy-ios.result == 'success' && '‚úÖ Success' || needs.deploy-ios.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment track info
          BRANCH="${{ needs.setup-test-and-prepare.outputs.branch }}"
          case "$BRANCH" in
            "master")
              echo "### üéØ Production Deployment" >> $GITHUB_STEP_SUMMARY
              echo "- **Android:** Google Play Store (Production)" >> $GITHUB_STEP_SUMMARY
              echo "- **iOS:** App Store (Production)" >> $GITHUB_STEP_SUMMARY
              ;;
            "preprod")
              echo "### üß™ Pre-Production Deployment" >> $GITHUB_STEP_SUMMARY
              echo "- **Android:** Google Play (Alpha Track)" >> $GITHUB_STEP_SUMMARY
              echo "- **iOS:** TestFlight (Beta)" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "### üî¨ Development Deployment" >> $GITHUB_STEP_SUMMARY
              echo "- **Android:** Google Play (Internal Track)" >> $GITHUB_STEP_SUMMARY
              echo "- **iOS:** TestFlight (Internal)" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Deployment completed on $(date)*" >> $GITHUB_STEP_SUMMARY