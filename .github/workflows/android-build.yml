# .github/workflows/android-build.yml - Optimized version with redundancy reduction
name: "Android Build and Deploy"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      publish:
        required: false
        type: boolean
        default: false
      version:
        required: true
        type: string
      version_code:
        required: true
        type: string
      branch:
        required: true
        type: string
      # 🆕 NEW: Accept pre-built dependencies cache
      cache_key:
        description: 'Dependencies cache key from main pipeline'
        required: false
        type: string
        default: ''
      # 🆕 NEW: Accept pre-built JS bundle
      js_bundle_artifact:
        description: 'Pre-built JavaScript bundle artifact name'
        required: false
        type: string
        default: ''
      # 🆕 NEW: Skip Node.js setup entirely
      skip_node_setup:
        description: 'Skip Node.js setup and use pre-built assets'
        required: false
        type: boolean
        default: false
    secrets:
      NPM_TOKEN:
        required: true
      GOOGLE_PLAY_JSON_KEY:
        required: true
      KEYSTORE_FILE:
        required: true
      KEYSTORE_PASSWORD:
        required: true
      KEY_ALIAS:
        required: true
      KEY_PASSWORD:
        required: true

env:
  NODE_VERSION: 22.11.0  # 🔄 Updated to latest LTS

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 25  # 🔄 Reduced from 30 (optimizations)
    
    # Simple environment logic (unchanged)
    environment: 
      name: ${{ inputs.branch == 'master' && 'production' || inputs.branch }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # 🔄 Updated from v3

      # 🎯 Conditional Node.js setup - skip if requested
      - name: Setup Node.js Environment
        if: inputs.skip_node_setup == false
        uses: actions/setup-node@v4  # 🔄 Updated from v3
        with:
          node-version: ${{ env.NODE_VERSION }}  # 🔄 Use env variable
          cache: "yarn"

      # 🚀 Smart dependency handling - skip if not needed
      - name: Restore Dependencies Cache
        if: inputs.cache_key != '' && inputs.skip_node_setup == false
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
            ~/.npm
          key: ${{ inputs.cache_key }}
          fail-on-cache-miss: true

      - name: Install Node Dependencies
        if: inputs.cache_key == '' && inputs.skip_node_setup == false
        run: |
          yarn install --frozen-lockfile --prefer-offline
          echo "✅ Dependencies installed: $(du -sh node_modules | cut -f1)"

      # 🎯 Smart JS bundle handling
      - name: Download Pre-built JS Bundle
        if: inputs.js_bundle_artifact != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.js_bundle_artifact }}
          path: ./js-bundle/

      - name: Setup JS Bundle
        run: |
          mkdir -p android/app/src/main/assets
          
          if [ "${{ inputs.js_bundle_artifact }}" != "" ] && [ -f "./js-bundle/index.android.bundle" ]; then
            # Use pre-built bundle
            cp ./js-bundle/index.android.bundle android/app/src/main/assets/
            if [ -d "./js-bundle/assets" ]; then
              cp -r ./js-bundle/assets/* android/app/src/main/res/ 2>/dev/null || true
            fi
            echo "✅ Using pre-built JS bundle"
          elif [ "${{ inputs.skip_node_setup }}" = "false" ]; then
            # Create new bundle (only if Node.js is available)
            echo "🔄 Creating fresh JS bundle..."
            npx react-native bundle \
              --platform android \
              --dev false \
              --entry-file index.js \
              --bundle-output android/app/src/main/assets/index.android.bundle \
              --assets-dest android/app/src/main/res/ \
              --minify true
            echo "✅ Fresh JS bundle created"
          else
            echo "❌ No JS bundle available and Node.js setup skipped!"
            exit 1
          fi
          
          # Verify bundle
          if [ -f "android/app/src/main/assets/index.android.bundle" ]; then
            bundle_size=$(ls -lh android/app/src/main/assets/index.android.bundle | awk '{print $5}')
            echo "📦 JS bundle ready: $bundle_size"
          else
            echo "❌ JS bundle missing!"
            exit 1
          fi

      # 🔄 Enhanced Ruby setup
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'  # 🔄 Updated from 3.1
          bundler-cache: true
          working-directory: android

      # 🚀 Enhanced Gradle cache
      - name: Cache Gradle Dependencies
        uses: actions/cache@v4  # 🔄 Updated from v3
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
            android/.gradle
            android/app/build/intermediates
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties', 'android/app/build.gradle', 'android/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 🔒 Enhanced keystore setup with validation
      - name: Setup Android Keystore
        run: |
          echo "🔑 Setting up Android keystore..."
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android/app/keystore.jks
          
          # Verify keystore
          if [ -f "android/app/keystore.jks" ]; then
            keystore_size=$(ls -lh android/app/keystore.jks | awk '{print $5}')
            echo "✅ Keystore ready: $keystore_size"
          else
            echo "❌ Keystore creation failed!"
            exit 1
          fi
          
          # Create keystore properties
          cat > android/keystore.properties << EOF
          storeFile=keystore.jks
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF
          
          echo "✅ Keystore properties configured"

      - name: Make Gradlew Executable
        run: chmod +x android/gradlew

      # 🎯 Enhanced version update with validation
      - name: Update App Version
        run: |
          cd android
          echo "📱 Updating app version..."
          echo "Target version: ${{ inputs.version }} (code: ${{ inputs.version_code }})"
          
          # Backup original
          cp app/build.gradle app/build.gradle.backup
          
          # Update build.gradle with new version
          sed -i 's/versionName ".*"/versionName "${{ inputs.version }}"/' app/build.gradle
          sed -i 's/versionCode [0-9]*/versionCode ${{ inputs.version_code }}/' app/build.gradle
          
          # Verify the changes
          echo "✅ Updated build.gradle:"
          grep -E "(versionName|versionCode)" app/build.gradle
          
          # Validate version format
          if ! echo "${{ inputs.version }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+'; then
            echo "⚠️ Warning: Version format might be non-standard"
          fi

      # 🚀 Enhanced build with better error handling
      - name: Build Android Debug
        if: inputs.environment == 'debug'
        run: |
          cd android
          echo "🔨 Building Android Debug..."
          
          # Pre-build checks
          echo "📋 Pre-build validation:"
          echo "- Gradle version: $(./gradlew --version | grep Gradle)"
          echo "- Java version: $(java -version 2>&1 | head -1)"
          echo "- Available space: $(df -h . | tail -1 | awk '{print $4}')"
          
          # Build with progress tracking
          ./gradlew bundleDebug \
            --no-daemon \
            --parallel \
            --build-cache \
            --info | tee build.log
          
          # Post-build summary
          if [ $? -eq 0 ]; then
            echo "✅ Debug build completed successfully"
            if [ -f "app/build/outputs/bundle/debug/app-debug.aab" ]; then
              bundle_size=$(ls -lh app/build/outputs/bundle/debug/app-debug.aab | awk '{print $5}')
              echo "📦 Debug bundle size: $bundle_size"
            fi
          else
            echo "❌ Debug build failed"
            echo "📄 Last 20 lines of build log:"
            tail -20 build.log
            exit 1
          fi

      - name: Build Android Release
        if: inputs.environment == 'release'
        run: |
          cd android
          echo "🔨 Building Android Release..."
          
          # Enhanced build for release
          ./gradlew bundleRelease \
            --no-daemon \
            --parallel \
            --build-cache \
            -Dorg.gradle.jvmargs="-Xmx4g -XX:+UseParallelGC" \
            --info | tee build.log
          
          # Post-build summary
          if [ $? -eq 0 ]; then
            echo "✅ Release build completed successfully"
            if [ -f "app/build/outputs/bundle/release/app-release.aab" ]; then
              bundle_size=$(ls -lh app/build/outputs/bundle/release/app-release.aab | awk '{print $5}')
              echo "📦 Release bundle size: $bundle_size"
              
              # Additional release validations
              echo "🔍 Release bundle validation:"
              aapt2 dump badging app/build/outputs/bundle/release/app-release.aab | grep -E "(package|versionCode|versionName)" || echo "aapt2 not available for validation"
            fi
          else
            echo "❌ Release build failed"
            echo "📄 Last 20 lines of build log:"
            tail -20 build.log
            exit 1
          fi

      # 🚀 Enhanced deployment with better error handling
      - name: Deploy to Google Play Store
        if: inputs.publish == true
        env:
          GOOGLE_PLAY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_REF_NAME: ${{ inputs.branch }}
        run: |
          cd android
          echo "🚀 Deploying to Google Play Store..."
          
          # Setup Play Store key
          echo "$GOOGLE_PLAY_JSON_KEY" | base64 -d > google-play-key.json
          
          # Verify key file
          if [ ! -f "google-play-key.json" ]; then
            echo "❌ Google Play key setup failed"
            exit 1
          fi
          
          # Determine track based on branch
          TRACK="internal"
          case "${{ inputs.branch }}" in
            "master") TRACK="production" ;;
            "preprod") TRACK="alpha" ;;
            *) TRACK="internal" ;;
          esac
          
          echo "📤 Deploying to track: $TRACK"
          
          # Deploy with error handling
          if bundle exec fastlane deploy_${{ inputs.branch }}; then
            echo "✅ Deployment to $TRACK completed successfully"
          else
            echo "❌ Deployment failed"
            echo "🔍 Checking fastlane logs..."
            ls -la fastlane/
            exit 1
          fi
          
          # Cleanup
          rm -f google-play-key.json

      # 🎯 Enhanced artifacts upload
      - name: Upload Build Artifacts
        if: inputs.publish == false
        uses: actions/upload-artifact@v4  # 🔄 Updated from v3
        with:
          name: android-${{ inputs.environment }}-${{ inputs.version }}-${{ github.run_number }}
          path: |
            android/app/build/outputs/bundle/debug/*.aab
            android/app/build/outputs/bundle/release/*.aab
            android/app/build/outputs/apk/debug/*.apk
            android/app/build/outputs/apk/release/*.apk
            android/build.log
          retention-days: 7
          compression-level: 6

      # 🎯 Enhanced deployment summary
      - name: Generate Build Summary
        if: always()
        run: |
          cd android
          
          echo "## 🤖 Android Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ inputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          
          # Build status
          if [ "${{ job.status }}" = "success" ]; then
            echo "- **Build Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Build Status:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # File sizes
          if [ -f "app/build/outputs/bundle/debug/app-debug.aab" ]; then
            debug_size=$(ls -lh app/build/outputs/bundle/debug/app-debug.aab | awk '{print $5}')
            echo "- **Debug Bundle:** $debug_size" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "app/build/outputs/bundle/release/app-release.aab" ]; then
            release_size=$(ls -lh app/build/outputs/bundle/release/app-release.aab | awk '{print $5}')
            echo "- **Release Bundle:** $release_size" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Deployment info
          if [ "${{ inputs.publish }}" = "true" ]; then
            TRACK="internal"
            case "${{ inputs.branch }}" in
              "master") TRACK="production" ;;
              "preprod") TRACK="alpha" ;;
            esac
            echo "- **Deployed to:** $TRACK track" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Artifacts:** Available for download" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Performance metrics
          if [ -f "build.log" ]; then
            build_time=$(grep "BUILD SUCCESSFUL" build.log | tail -1 | grep -o '[0-9]*m [0-9]*s' || echo "Unknown")
            if [ "$build_time" != "Unknown" ]; then
              echo "- **Build Time:** $build_time" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Build completed on $(date)*" >> $GITHUB_STEP_SUMMARY

      # 🧹 Cleanup
      - name: Cleanup Sensitive Files
        if: always()
        run: |
          rm -f android/app/keystore.jks
          rm -f android/keystore.properties
          rm -f android/google-play-key.json
          echo "✅ Sensitive files cleaned up"