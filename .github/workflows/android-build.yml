# .github/workflows/android-build.yml - Optimized version with redundancy reduction
name: "Android Build and Deploy"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      publish:
        required: false
        type: boolean
        default: false
      version:
        required: true
        type: string
      version_code:
        required: true
        type: string
      branch:
        required: true
        type: string
      js_bundle_artifact:
        description: 'Pre-built JavaScript bundle artifact name'
        required: false
        type: string
        default: ''
    secrets:
      NPM_TOKEN:
        required: true
      GOOGLE_PLAY_JSON_KEY:
        required: true
      KEYSTORE_FILE:
        required: true
      KEYSTORE_PASSWORD:
        required: true
      KEY_ALIAS:
        required: true
      KEY_PASSWORD:
        required: true

env:
  NODE_VERSION: 22.11.0

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    #‡∏Å‡∏≥‡∏´‡∏ô‡∏î GitHub Environment ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ deploy
    environment: 
      name: ${{ inputs.branch == 'master' && 'production' || inputs.branch }}
    
    steps:
      #‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô git ‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• 
      - name: Checkout Repository
        uses: actions/checkout@v4

      #‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á node
      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      #‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á module install
      - name: Install Node Dependencies
        run: yarn install --frozen-lockfile

      #‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î JavaScript bundle ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å build ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
      - name: Download Pre-built JS Bundle
        if: inputs.js_bundle_artifact != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.js_bundle_artifact }}
          path: ./js-bundle/

      #‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° JavaScript bundle ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ build ‡πÉ‡∏´‡∏°‡πà
      - name: Setup JS Bundle
        run: |
          mkdir -p android/app/src/main/assets
          
          if [ "${{ inputs.js_bundle_artifact }}" != "" ] && [ -f "./js-bundle/index.android.bundle" ]; then
            # Use pre-built bundle
            cp ./js-bundle/index.android.bundle android/app/src/main/assets/
            if [ -d "./js-bundle/assets" ]; then
              cp -r ./js-bundle/assets/* android/app/src/main/res/ 2>/dev/null || true
            fi
            echo "‚úÖ Using pre-built JS bundle"
          else
            # Create new bundle (node_modules is available)
            echo "üîÑ Creating fresh JS bundle..."
            npx react-native bundle \
              --platform android \
              --dev false \
              --entry-file index.js \
              --bundle-output android/app/src/main/assets/index.android.bundle \
              --assets-dest android/app/src/main/res/ \
              --minify true
            echo "‚úÖ Fresh JS bundle created"
          fi
          
          # Verify bundle
          if [ -f "android/app/src/main/assets/index.android.bundle" ]; then
            bundle_size=$(ls -lh android/app/src/main/assets/index.android.bundle | awk '{print $5}')
            echo "üì¶ JS bundle ready: $bundle_size"
          else
            echo "‚ùå JS bundle missing!"
            exit 1
          fi

      #‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Ruby environment ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Fastlane
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: android

      #‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° keystore ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡∏Ç‡∏∂‡πâ‡∏ô store
      - name: Setup Android Keystore
        run: |
          echo "üîë Setting up Android keystore..."
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android/app/keystore.jks
          
          # Verify keystore
          if [ -f "android/app/keystore.jks" ]; then
            keystore_size=$(ls -lh android/app/keystore.jks | awk '{print $5}')
            echo "‚úÖ Keystore ready: $keystore_size"
          else
            echo "‚ùå Keystore creation failed!"
            exit 1
          fi
          
          # Create keystore properties
          cat > android/keystore.properties << EOF
          storeFile=keystore.jks
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          EOF
          
          echo "‚úÖ Keystore properties configured"
      
      #‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå execute ‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå gradlew ‡πÄ‡∏°‡∏∑‡πà‡∏≠ git clone file permissions ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô default (644)
      - name: Make Gradlew Executable
        run: chmod +x android/gradlew

      #build Android app ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î debug ‡πÄ‡∏°‡∏∑‡πà‡∏≠ environment ‡πÄ‡∏õ‡πá‡∏ô debug
      - name: Build Android Debug
        if: inputs.environment == 'debug'
        run: |
          cd android
          echo "üî® Building Android Debug..."
          
          # Pre-build checks
          echo "üìã Pre-build validation:"
          echo "- Gradle version: $(./gradlew --version | grep Gradle)"
          echo "- Java version: $(java -version 2>&1 | head -1)"
          echo "- Available space: $(df -h . | tail -1 | awk '{print $4}')"
          
          # Build with progress tracking
          ./gradlew bundleDebug \
            --no-daemon \
            --parallel \
            --build-cache \
            --info | tee build.log
          
          # Post-build summary
          if [ $? -eq 0 ]; then
            echo "‚úÖ Debug build completed successfully"
            if [ -f "app/build/outputs/bundle/debug/app-debug.aab" ]; then
              bundle_size=$(ls -lh app/build/outputs/bundle/debug/app-debug.aab | awk '{print $5}')
              echo "üì¶ Debug bundle size: $bundle_size"
            fi
          else
            echo "‚ùå Debug build failed"
            echo "üìÑ Last 20 lines of build log:"
            tail -20 build.log
            exit 1
          fi

      #build Android app ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î production/release ‡πÄ‡∏°‡∏∑‡πà‡∏≠ environment ‡πÄ‡∏õ‡πá‡∏ô release
      - name: Build Android Release
        if: inputs.environment == 'release'
        run: |
          cd android
          echo "üî® Building Android Release..."
          
          # Enhanced build for release
          ./gradlew bundleRelease \
            --no-daemon \
            --parallel \
            --build-cache \
            -Dorg.gradle.jvmargs="-Xmx4g -XX:+UseParallelGC" \
            --info | tee build.log
          
          # Post-build summary
          if [ $? -eq 0 ]; then
            echo "‚úÖ Release build completed successfully"
            if [ -f "app/build/outputs/bundle/release/app-release.aab" ]; then
              bundle_size=$(ls -lh app/build/outputs/bundle/release/app-release.aab | awk '{print $5}')
              echo "üì¶ Release bundle size: $bundle_size"
              
              # Additional release validations
              echo "üîç Release bundle validation:"
              aapt2 dump badging app/build/outputs/bundle/release/app-release.aab | grep -E "(package|versionCode|versionName)" || echo "aapt2 not available for validation"
            fi
          else
            echo "‚ùå Release build failed"
            echo "üìÑ Last 20 lines of build log:"
            tail -20 build.log
            exit 1
          fi

      #upload ‡πÅ‡∏•‡∏∞ deploy Android app ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Play Store ‡πÄ‡∏°‡∏∑‡πà‡∏≠ publish = true
      - name: Deploy to Google Play Store
        if: inputs.publish == true
        env:
          GOOGLE_PLAY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_REF_NAME: ${{ inputs.branch }}
          VERSION_NAME: ${{ inputs.version }}
          VERSION_CODE: ${{ inputs.version_code }}
          SKIP_AUTO_VERSION: "true"
        run: |
          cd android
          echo "üöÄ Deploying to Google Play Store..."
          
          # Setup Play Store key
          echo "$GOOGLE_PLAY_JSON_KEY" | base64 -d > google-play-key.json
          
          # Verify key file
          if [ ! -f "google-play-key.json" ]; then
            echo "‚ùå Google Play key setup failed"
            exit 1
          fi
          
          # Determine track based on branch
          TRACK="internal"
          case "${{ inputs.branch }}" in
            "master") TRACK="production" ;;
            "preprod") TRACK="alpha" ;;
            *) TRACK="internal" ;;
          esac
          
          echo "üì§ Deploying to track: $TRACK"
          
          # Deploy with error handling
          if bundle exec fastlane deploy_${{ inputs.branch }}; then
            echo "‚úÖ Deployment to $TRACK completed successfully"
          else
            echo "‚ùå Deployment failed"
            echo "üîç Checking fastlane logs..."
            ls -la fastlane/
            exit 1
          fi
          
          # Cleanup
          rm -f google-play-key.json

      # ‡πÄ‡∏Å‡πá‡∏ö build outputs ‡πÄ‡∏õ‡πá‡∏ô artifacts ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ publish
      - name: Upload Build Artifacts
        if: inputs.publish == false
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ inputs.environment }}-${{ inputs.version }}-${{ github.run_number }}
          path: |
            android/app/build/outputs/bundle/debug/*.aab
            android/app/build/outputs/bundle/release/*.aab
            android/app/build/outputs/apk/debug/*.apk
            android/app/build/outputs/apk/release/*.apk
            android/build.log
          retention-days: 7
          compression-level: 6

      #‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£ build 
      - name: Generate Build Summary
        if: always()
        run: |
          cd android
          
          echo "## ü§ñ Android Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ inputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          
          # Build status
          if [ "${{ job.status }}" = "success" ]; then
            echo "- **Build Status:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Build Status:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # File sizes
          if [ -f "app/build/outputs/bundle/debug/app-debug.aab" ]; then
            debug_size=$(ls -lh app/build/outputs/bundle/debug/app-debug.aab | awk '{print $5}')
            echo "- **Debug Bundle:** $debug_size" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "app/build/outputs/bundle/release/app-release.aab" ]; then
            release_size=$(ls -lh app/build/outputs/bundle/release/app-release.aab | awk '{print $5}')
            echo "- **Release Bundle:** $release_size" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Deployment info
          if [ "${{ inputs.publish }}" = "true" ]; then
            TRACK="internal"
            case "${{ inputs.branch }}" in
              "master") TRACK="production" ;;
              "preprod") TRACK="alpha" ;;
            esac
            echo "- **Deployed to:** $TRACK track" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Artifacts:** Available for download" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Performance metrics
          if [ -f "build.log" ]; then
            build_time=$(grep "BUILD SUCCESSFUL" build.log | tail -1 | grep -o '[0-9]*m [0-9]*s' || echo "Unknown")
            if [ "$build_time" != "Unknown" ]; then
              echo "- **Build Time:** $build_time" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Build completed on $(date)*" >> $GITHUB_STEP_SUMMARY

      #‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏±‡∏ö ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å build/deploy ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      - name: Cleanup Sensitive Files
        if: always()
        run: |
          rm -f android/app/keystore.jks
          rm -f android/keystore.properties
          rm -f android/google-play-key.json
          echo "‚úÖ Sensitive files cleaned up"