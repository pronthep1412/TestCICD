# .github/workflows/android-build.yml - Improved version with proper version handling
name: "Android Build and Deploy"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      publish:
        required: false
        type: boolean
        default: false
      version:
        required: true
        type: string
      version_code:
        required: true
        type: string
      branch:
        required: true
        type: string
    secrets:
      NPM_TOKEN:
        required: true
      GOOGLE_PLAY_JSON_KEY:
        required: true
      KEYSTORE_FILE:
        required: true
      KEYSTORE_PASSWORD:
        required: true
      KEY_ALIAS:
        required: true
      KEY_PASSWORD:
        required: true

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    # Simple environment logic
    environment: 
      name: ${{ inputs.branch == 'master' && 'production' || inputs.branch }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.0
          cache: "yarn"

      - name: Install Node modules
        run: yarn ci

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
          bundler-cache: true
          working-directory: android

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Setup Keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > android/app/keystore.jks
          echo "storeFile=keystore.jks" > android/keystore.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/keystore.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/keystore.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/keystore.properties

      - name: Make Gradlew Executable
        run: chmod +x android/gradlew

      # âœ¨ NEW: Update version before building
      - name: Update App Version
        run: |
          cd android
          echo "Updating version to: ${{ inputs.version }} (code: ${{ inputs.version_code }})"
          
          # Update build.gradle with new version
          sed -i 's/versionName ".*"/versionName "${{ inputs.version }}"/' app/build.gradle
          sed -i 's/versionCode [0-9]*/versionCode ${{ inputs.version_code }}/' app/build.gradle
          
          # Verify the changes
          echo "Updated build.gradle:"
          grep -E "(versionName|versionCode)" app/build.gradle

      # Build different configurations
      - name: Build Debug
        if: inputs.environment == 'debug'
        run: cd android && ./gradlew bundleDebug --no-daemon

      - name: Build Release
        if: inputs.environment == 'release'
        run: cd android && ./gradlew bundleRelease --no-daemon

      # Deploy to stores with proper environment variables
      - name: Deploy to Play Store
        if: inputs.publish == true
        env:
          GOOGLE_PLAY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_REF_NAME: ${{ inputs.branch }}
        run: |
          cd android
          echo "$GOOGLE_PLAY_JSON_KEY" | base64 -d > google-play-key.json
          bundle exec fastlane deploy_${{ inputs.branch }}

      # Upload artifacts for non-deploy builds
      - name: Upload Build Artifacts
        if: inputs.publish == false
        uses: actions/upload-artifact@v4
        with:
          name: android-${{ inputs.environment }}-${{ inputs.version }}
          path: |
            android/app/build/outputs/bundle/debug/*.aab
            android/app/build/outputs/bundle/release/*.aab
          retention-days: 7

      # Deployment summary
      - name: Deployment Summary
        if: inputs.publish == true
        run: |
          TRACK="internal"
          if [ "${{ inputs.branch }}" = "master" ]; then
            TRACK="production"
          elif [ "${{ inputs.branch }}" = "preprod" ]; then
            TRACK="alpha"
          fi
          
          echo "## ðŸ¤– Android Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ inputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ inputs.branch }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Track:** $TRACK" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** âœ… Deployed successfully" >> $GITHUB_STEP_SUMMARY