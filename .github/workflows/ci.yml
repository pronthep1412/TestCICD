# ci.yml - Fixed Issues Version
name: Pull Request Testing

on:
  pull_request:
    branches:
      - "master"
      - "develop"
      - "preprod"

env:
  NODE_VERSION: 20.18.0

jobs:
  # Main testing and validation
  test-and-validate:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      pr_version: ${{ steps.version.outputs.version }}
      target_branch: ${{ steps.branch.outputs.name }}
      coverage: ${{ steps.coverage.outputs.percentage }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-deps-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install Dependencies
        run: yarn ci

      - name: Generate PR Version
        id: version
        run: |
          PR_NUMBER=${{ github.event.number }}
          BASE_VERSION=$(node -p "require('./package.json').version")
          PR_VERSION="$BASE_VERSION-pr.$PR_NUMBER"
          echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
          echo "Generated PR version: $PR_VERSION"

      - name: Set Target Branch  
        id: branch
        run: |
          TARGET_BRANCH=${{ github.base_ref }}
          echo "name=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "Target branch: $TARGET_BRANCH"

      # Quality Checks
      - name: Code Linting
        run: yarn lint

      - name: Type Checking
        run: yarn type-check

      - name: Security Audit
        run: |
          echo "## 🔍 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          if yarn audit --audit-level moderate --json > audit-results.json 2>/dev/null; then
            echo "✅ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security vulnerabilities detected - check logs for details" >> $GITHUB_STEP_SUMMARY
            yarn audit --audit-level moderate || true
          fi

      - name: Unit & Integration Tests with Coverage
        run: yarn test:ci

      - name: Extract Coverage Percentage (Fixed)
        id: coverage
        run: |
          COVERAGE="0"
          
          # Method 1: Try to get from Jest output
          if yarn test:ci --silent 2>&1 | grep -o "All files[^|]*|[^|]*|[^|]*|[^|]*|[^|]*[0-9]*\.[0-9]*" | tail -1 | grep -o "[0-9]*\.[0-9]*" >/dev/null 2>&1; then
            COVERAGE=$(yarn test:ci --silent 2>&1 | grep -o "All files[^|]*|[^|]*|[^|]*|[^|]*|[^|]*[0-9]*\.[0-9]*" | tail -1 | grep -o "[0-9]*\.[0-9]*" | tail -1)
          # Method 2: Try coverage-summary.json
          elif [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -p "
              try {
                const summary = JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json'));
                summary.total.lines.pct || 0;
              } catch(e) { 0; }
            ")
          # Method 3: Try lcov.info
          elif [ -f "coverage/lcov.info" ]; then
            if command -v lcov >/dev/null 2>&1; then
              COVERAGE=$(lcov --summary coverage/lcov.info 2>/dev/null | grep -o "lines......: [0-9]*\.[0-9]*%" | grep -o "[0-9]*\.[0-9]*" | head -1 || echo "0")
            fi
          # Method 4: Default Jest coverage pattern
          elif [ -d "coverage" ]; then
            # Try to find any coverage percentage in files
            COVERAGE=$(find coverage -name "*.html" -exec grep -o "[0-9]*\.[0-9]*%" {} \; | head -1 | sed 's/%//' || echo "0")
          fi
          
          # Fallback: If still empty, set to 0
          if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "" ]; then
            COVERAGE="0"
          fi
          
          # Validate it's a number
          if ! echo "$COVERAGE" | grep -q "^[0-9]*\.*[0-9]*$"; then
            COVERAGE="0"
          fi
          
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Extracted coverage: $COVERAGE%"

      - name: Coverage Report (Fixed)
        run: |
          echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          COVERAGE="${{ steps.coverage.outputs.percentage }}"
          echo "- **Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "coverage" ]; then
            echo "- **Detailed Report:** Available in artifacts" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Detailed Report:** Coverage directory not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Coverage evaluation (using bc if available, otherwise shell arithmetic)
          if command -v bc >/dev/null 2>&1; then
            COVERAGE_GOOD=$(echo "$COVERAGE >= 70" | bc -l)
          else
            # Shell arithmetic (requires integer)
            COVERAGE_INT=${COVERAGE%.*}
            if [ "$COVERAGE_INT" -ge 70 ]; then
              COVERAGE_GOOD=1
            else
              COVERAGE_GOOD=0
            fi
          fi
          
          if [ "$COVERAGE_GOOD" = "1" ]; then
            echo "- **✅ Good:** Coverage meets recommended threshold (≥70%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **⚠️ Warning:** Coverage below 70% recommended threshold" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.event.number }}
          path: |
            coverage/
            jest-coverage/
          retention-days: 7

  # Build testing for Android
  build-android-test:
    needs: test-and-validate
    uses: ./.github/workflows/android-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.test-and-validate.outputs.pr_version }}
      branch: ${{ needs.test-and-validate.outputs.target_branch }}
    secrets: inherit

  # Build testing for iOS
  build-ios-test:
    needs: test-and-validate  
    uses: ./.github/workflows/ios-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.test-and-validate.outputs.pr_version }}
      branch: ${{ needs.test-and-validate.outputs.target_branch }}
    secrets: inherit

  # Bundle analysis (Fixed)
  bundle-analysis:
    needs: test-and-validate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install Dependencies
        run: yarn ci

      - name: Bundle Size Analysis (Fixed)
        run: |
          echo "## 📦 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Create a simple React Native bundle for analysis
          start_time=$(date +%s)
          
          # Try different approaches to create a bundle
          bundle_created=false
          
          # Method 1: Using react-native bundle command
          if command -v react-native >/dev/null 2>&1; then
            echo "Attempting React Native bundle..."
            if react-native bundle \
              --platform android \
              --dev false \
              --entry-file index.js \
              --bundle-output /tmp/index.android.bundle \
              --assets-dest /tmp/ >/dev/null 2>&1; then
              bundle_created=true
              bundle_path="/tmp/index.android.bundle"
            fi
          fi
          
          # Method 2: Using Metro bundler directly (if available)
          if [ "$bundle_created" = false ] && command -v npx >/dev/null 2>&1; then
            echo "Attempting Metro bundle..."
            if npx react-native bundle \
              --platform android \
              --dev false \
              --entry-file index.js \
              --bundle-output /tmp/index.android.bundle >/dev/null 2>&1; then
              bundle_created=true
              bundle_path="/tmp/index.android.bundle"
            fi
          fi
          
          # Method 3: Create a webpack-style build (fallback)
          if [ "$bundle_created" = false ]; then
            echo "Creating approximate bundle size estimation..."
            # Calculate approximate size from source files
            if [ -d "src" ] || [ -d "components" ] || [ -d "screens" ]; then
              # Sum up JS/TS files sizes
              total_size=$(find . -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" 2>/dev/null | xargs wc -c 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
              # Estimate bundle size (roughly 2-3x source size after bundling)
              estimated_size=$((total_size * 2))
              echo "$estimated_size" > /tmp/estimated.bundle
              bundle_path="/tmp/estimated.bundle"
              bundle_created=true
              ESTIMATION_NOTE=" (estimated)"
            fi
          fi
          
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          
          if [ "$bundle_created" = true ] && [ -f "$bundle_path" ]; then
            bundle_size=$(ls -lh "$bundle_path" | awk '{print $5}')
            bundle_bytes=$(wc -c < "$bundle_path")
            
            echo "- **✅ Bundle Analysis:** Completed" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Time:** ${build_time}s" >> $GITHUB_STEP_SUMMARY
            echo "- **Android Bundle Size:** $bundle_size${ESTIMATION_NOTE:-}" >> $GITHUB_STEP_SUMMARY
            
            # Size evaluation
            if [ "$bundle_bytes" -lt 1048576 ]; then  # < 1MB
              echo "- **📊 Size Status:** ✅ Excellent (< 1MB)" >> $GITHUB_STEP_SUMMARY
            elif [ "$bundle_bytes" -lt 5242880 ]; then  # < 5MB
              echo "- **📊 Size Status:** ✅ Good (< 5MB)" >> $GITHUB_STEP_SUMMARY
            elif [ "$bundle_bytes" -lt 10485760 ]; then  # < 10MB
              echo "- **📊 Size Status:** ⚠️ Large (< 10MB)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **📊 Size Status:** ❌ Very Large (> 10MB)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **⚠️ Bundle Analysis:** Could not create bundle" >> $GITHUB_STEP_SUMMARY
            echo "- **Reason:** React Native bundle commands not available in CI environment" >> $GITHUB_STEP_SUMMARY
            echo "- **Suggestion:** Add bundle build scripts to package.json" >> $GITHUB_STEP_SUMMARY
          fi

  # PR Summary (Fixed)
  pr-summary:
    needs: [test-and-validate, build-android-test, build-ios-test, bundle-analysis]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: PR Summary (Fixed)
        run: |
          echo "## 🚀 Pull Request Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Version:** ${{ needs.test-and-validate.outputs.pr_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Branch:** ${{ needs.test-and-validate.outputs.target_branch }}" >> $GITHUB_STEP_SUMMARY
          
          # Handle coverage display
          COVERAGE="${{ needs.test-and-validate.outputs.coverage }}"
          if [ -n "$COVERAGE" ] && [ "$COVERAGE" != "" ] && [ "$COVERAGE" != "0" ]; then
            echo "- **Test Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Test Coverage:** Unable to determine" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Linting:** ${{ needs.test-and-validate.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type Check:** ${{ needs.test-and-validate.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests:** ${{ needs.test-and-validate.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Audit:** ${{ needs.test-and-validate.result == 'success' && '✅ Completed' || '⚠️ Issues Found' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 Build Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Build:** ${{ needs.build-android-test.result == 'success' && '✅ Passed' || needs.build-android-test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **iOS Build:** ${{ needs.build-ios-test.result == 'success' && '✅ Passed' || needs.build-ios-test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Analysis:** ${{ needs.bundle-analysis.result == 'success' && '✅ Completed' || '⚠️ Partial' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status with better logic
          TEST_SUCCESS="${{ needs.test-and-validate.result == 'success' }}"
          ANDROID_OK="${{ needs.build-android-test.result != 'failure' }}"
          IOS_OK="${{ needs.build-ios-test.result != 'failure' }}"
          
          # Handle coverage evaluation
          COVERAGE="${{ needs.test-and-validate.outputs.coverage }}"
          COVERAGE_ADEQUATE="true"
          
          if [ -n "$COVERAGE" ] && [ "$COVERAGE" != "" ] && [ "$COVERAGE" != "0" ]; then
            # Try to evaluate coverage (handle decimal)
            if command -v bc >/dev/null 2>&1; then
              COVERAGE_ADEQUATE=$(echo "$COVERAGE >= 70" | bc -l)
            else
              # Fallback: treat as integer
              COVERAGE_INT=${COVERAGE%.*}
              if [ "$COVERAGE_INT" -lt 70 ]; then
                COVERAGE_ADEQUATE="false"
              fi
            fi
          fi
          
          if [ "$TEST_SUCCESS" = "true" ] && [ "$ANDROID_OK" = "true" ] && [ "$IOS_OK" = "true" ]; then
            if [ "$COVERAGE_ADEQUATE" = "1" ] || [ "$COVERAGE_ADEQUATE" = "true" ]; then
              echo "### ✅ Overall Status: Ready for Review" >> $GITHUB_STEP_SUMMARY
              echo "All checks passed and coverage is adequate." >> $GITHUB_STEP_SUMMARY
            else
              echo "### ⚠️ Overall Status: Ready but Low Coverage" >> $GITHUB_STEP_SUMMARY
              echo "All checks passed but consider improving test coverage." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ❌ Overall Status: Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "Please fix the failing checks before merging." >> $GITHUB_STEP_SUMMARY
          fi