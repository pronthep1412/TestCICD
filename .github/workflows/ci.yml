# ci-optimized-final.yml - Zero Redundancy Version
name: Pull Request Testing

on:
  pull_request:
    branches: [master, develop, preprod]
    paths-ignore: ['**.md', 'docs/**', '.gitignore']

env:
  NODE_VERSION: 22.11.0
  YARN_ENABLE_IMMUTABLE_INSTALLS: false
  CI: true

# Global settings
defaults:
  run:
    shell: bash

jobs:
  # Single source of truth for setup and testing
  main-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      pr_version: ${{ steps.version.outputs.version }}
      target_branch: ${{ steps.branch.outputs.name }}
      coverage: ${{ steps.coverage.outputs.percentage }}
      should_build: ${{ steps.changes.outputs.should_build }}
      
    steps:
      # Single checkout for everything
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Check what changed (skip expensive builds if not needed)
      - name: Detect Changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E '\.(js|jsx|ts|tsx|json|lock)$|android/|ios/' > /dev/null; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "Code changes detected - will run full pipeline"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "Only documentation changes - skipping builds"
          fi

      # Single Node.js setup for entire pipeline
      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      # Single dependency installation with comprehensive cache
      - name: Install Dependencies
        uses: actions/cache@v4
        id: deps-cache
        with:
          path: |
            node_modules
            ~/.cache/yarn
            ~/.npm
            ios/Pods
          key: deps-${{ runner.os }}-${{ hashFiles('yarn.lock', 'ios/Podfile.lock') }}
          restore-keys: deps-${{ runner.os }}-
      
      - name: Install Packages
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --prefer-offline

      # Generate versions once
      - name: Generate Metadata
        id: version
        run: |
          PR_NUMBER=${{ github.event.number }}
          BASE_VERSION=$(node -p "require('./package.json').version")
          SHORT_SHA=$(git rev-parse --short HEAD)
          PR_VERSION="$BASE_VERSION-pr.$PR_NUMBER.$SHORT_SHA"
          echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
          
          TARGET_BRANCH=${{ github.base_ref }}
          echo "name=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          
          echo "Generated PR version: $PR_VERSION for branch: $TARGET_BRANCH"

      - name: Set Target Branch
        id: branch
        run: echo "name=${{ github.base_ref }}" >> $GITHUB_OUTPUT

      # All quality checks in parallel (optimized)
      - name: Code Quality Suite
        run: |
          echo "Running comprehensive quality checks..."
          
          # Parallel execution
          yarn lint --format=json --output-file=lint-results.json &
          LINT_PID=$!
          
          yarn type-check --noEmit &
          TYPE_PID=$!
          
          # Security audit (non-blocking)
          yarn audit --level moderate --json > audit-results.json 2>/dev/null || echo "Security issues detected" &
          AUDIT_PID=$!
          
          # Wait for critical checks
          wait $LINT_PID && echo "‚úÖ Linting passed" || (echo "‚ùå Linting failed" && exit 1)
          wait $TYPE_PID && echo "‚úÖ Type checking passed" || (echo "‚ùå Type checking failed" && exit 1)
          wait $AUDIT_PID # Don't fail on audit
          
          echo "Quality checks completed"

      # Comprehensive testing
      - name: Test Suite with Coverage
        run: |
          yarn test:ci --coverage --watchAll=false --passWithNoTests
          
          # Generate coverage badge if possible
          if [ -f "coverage/coverage-summary.json" ] && command -v npx >/dev/null; then
            npx coverage-badges-cli --output coverage/badges 2>/dev/null || true
          fi

      - name: Extract Test Results
        id: coverage
        run: |
          COVERAGE="0"
          
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -p "
              try {
                const summary = require('./coverage/coverage-summary.json');
                Math.round(summary.total.lines.pct || 0);
              } catch(e) { 0; }
            ")
          fi
          
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Test coverage: $COVERAGE%"

      # Bundle analysis (only if code changed)
      - name: Bundle Analysis
        if: steps.changes.outputs.should_build == 'true'
        run: |
          echo "## üì¶ Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          
          start_time=$(date +%s)
          
          if npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android-bundle.js \
            --minify true 2>/dev/null; then
            
            bundle_size=$(ls -lh android-bundle.js | awk '{print $5}')
            bundle_bytes=$(wc -c < android-bundle.js)
            end_time=$(date +%s)
            build_time=$((end_time - start_time))
            
            echo "- **Bundle Size:** $bundle_size" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Time:** ${build_time}s" >> $GITHUB_STEP_SUMMARY
            
            # Size evaluation with recommendations
            if [ "$bundle_bytes" -lt 2097152 ]; then
              echo "- **Status:** üéâ Excellent (< 2MB)" >> $GITHUB_STEP_SUMMARY
            elif [ "$bundle_bytes" -lt 5242880 ]; then
              echo "- **Status:** ‚úÖ Good (< 5MB)" >> $GITHUB_STEP_SUMMARY
            elif [ "$bundle_bytes" -lt 10485760 ]; then
              echo "- **Status:** ‚ö†Ô∏è Large (< 10MB)" >> $GITHUB_STEP_SUMMARY
              echo "- **Tip:** Consider code splitting or tree shaking" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status:** ‚ùå Very Large (> 10MB)" >> $GITHUB_STEP_SUMMARY
              echo "- **Action Required:** Use bundle analyzer to optimize" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Store for artifacts
            mkdir -p build-outputs
            mv android-bundle.js build-outputs/ 2>/dev/null || true
          else
            echo "- **Status:** ‚ùå Bundle creation failed" >> $GITHUB_STEP_SUMMARY
          fi

      # Performance metrics
      - name: Performance Check
        continue-on-error: true
        run: |
          echo "## ‚ö° Performance Metrics" >> $GITHUB_STEP_SUMMARY
          
          # Quick Metro performance test
          start_time=$(date +%s%3N)
          timeout 45s npx react-native start --reset-cache >/dev/null 2>&1 &
          METRO_PID=$!
          sleep 25
          kill $METRO_PID 2>/dev/null || true
          wait $METRO_PID 2>/dev/null || true
          end_time=$(date +%s%3N)
          
          metro_time=$(( (end_time - start_time) / 1000 ))
          echo "- **Metro Start Time:** ${metro_time}s" >> $GITHUB_STEP_SUMMARY
          
          if [ "$metro_time" -lt 20 ]; then
            echo "- **Metro Performance:** üöÄ Excellent" >> $GITHUB_STEP_SUMMARY
          elif [ "$metro_time" -lt 35 ]; then
            echo "- **Metro Performance:** ‚úÖ Good" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Metro Performance:** ‚ö†Ô∏è Could be improved" >> $GITHUB_STEP_SUMMARY
          fi

      # Comprehensive reporting
      - name: Generate Test Report
        if: always()
        run: |
          echo "## üìä Comprehensive Test Report" >> $GITHUB_STEP_SUMMARY
          COVERAGE="${{ steps.coverage.outputs.percentage }}"
          echo "- **Line Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          
          # Detailed coverage if available
          if [ -f "coverage/coverage-summary.json" ]; then
            BRANCHES=$(node -p "require('./coverage/coverage-summary.json').total.branches.pct || 0")
            FUNCTIONS=$(node -p "require('./coverage/coverage-summary.json').total.functions.pct || 0")
            STATEMENTS=$(node -p "require('./coverage/coverage-summary.json').total.statements.pct || 0")
            
            echo "- **Branch Coverage:** ${BRANCHES}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Function Coverage:** ${FUNCTIONS}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Statement Coverage:** ${STATEMENTS}%" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Quality assessment
          if [ "$COVERAGE" = "0" ]; then
            echo "- **Quality Status:** ‚ö†Ô∏è No tests - consider adding unit tests" >> $GITHUB_STEP_SUMMARY
          elif [ "$COVERAGE" -ge 90 ]; then
            echo "- **Quality Status:** üéâ Excellent coverage!" >> $GITHUB_STEP_SUMMARY
          elif [ "$COVERAGE" -ge 80 ]; then
            echo "- **Quality Status:** ‚úÖ Good coverage" >> $GITHUB_STEP_SUMMARY
          elif [ "$COVERAGE" -ge 70 ]; then
            echo "- **Quality Status:** üëç Acceptable coverage" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Quality Status:** üìà Consider improving test coverage" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-and-analysis-${{ github.event.number }}
          path: |
            coverage/
            build-outputs/
            lint-results.json
            audit-results.json
          retention-days: 7

  # Build jobs (only run if code changed)
  build-android:
    needs: main-pipeline
    if: needs.main-pipeline.outputs.should_build == 'true'
    uses: ./.github/workflows/android-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.main-pipeline.outputs.pr_version }}
      version_code: "99"
      branch: ${{ needs.main-pipeline.outputs.target_branch }}
    secrets: inherit

  build-ios:
    needs: main-pipeline
    if: needs.main-pipeline.outputs.should_build == 'true'
    uses: ./.github/workflows/ios-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.main-pipeline.outputs.pr_version }}
      version_code: "99"
      branch: ${{ needs.main-pipeline.outputs.target_branch }}
    secrets: inherit

  # Final summary (lightweight - no checkout needed)
  pr-summary:
    needs: [main-pipeline, build-android, build-ios]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 2
    
    steps:
      - name: Generate Final Summary
        run: |
          echo "## üöÄ Pull Request Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Version:** ${{ needs.main-pipeline.outputs.pr_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Branch:** ${{ needs.main-pipeline.outputs.target_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Coverage:** ${{ needs.main-pipeline.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Pipeline results
          echo "### üîç Pipeline Results" >> $GITHUB_STEP_SUMMARY
          MAIN_STATUS="${{ needs.main-pipeline.result }}"
          ANDROID_STATUS="${{ needs.build-android.result }}"
          IOS_STATUS="${{ needs.build-ios.result }}"
          SHOULD_BUILD="${{ needs.main-pipeline.outputs.should_build }}"
          
          if [ "$MAIN_STATUS" = "success" ]; then
            echo "- **Code Quality:** ‚úÖ All checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Code Quality:** ‚ùå Issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$SHOULD_BUILD" = "true" ]; then
            if [ "$ANDROID_STATUS" = "success" ]; then
              echo "- **Android Build:** ‚úÖ Successful" >> $GITHUB_STEP_SUMMARY
            elif [ "$ANDROID_STATUS" = "skipped" ]; then
              echo "- **Android Build:** ‚è≠Ô∏è Skipped" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Android Build:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "$IOS_STATUS" = "success" ]; then
              echo "- **iOS Build:** ‚úÖ Successful" >> $GITHUB_STEP_SUMMARY
            elif [ "$IOS_STATUS" = "skipped" ]; then
              echo "- **iOS Build:** ‚è≠Ô∏è Skipped" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **iOS Build:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Builds:** ‚è≠Ô∏è Skipped (documentation only)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall recommendation
          COVERAGE="${{ needs.main-pipeline.outputs.coverage }}"
          
          if [ "$MAIN_STATUS" = "success" ] && ([ "$ANDROID_STATUS" = "success" ] || [ "$SHOULD_BUILD" = "false" ]) && ([ "$IOS_STATUS" = "success" ] || [ "$SHOULD_BUILD" = "false" ]); then
            if [ "$COVERAGE" -ge 80 ]; then
              echo "### üéâ Status: Ready to Merge!" >> $GITHUB_STEP_SUMMARY
              echo "Excellent work! All checks passed with strong test coverage." >> $GITHUB_STEP_SUMMARY
            elif [ "$COVERAGE" -ge 70 ]; then
              echo "### ‚úÖ Status: Ready for Review" >> $GITHUB_STEP_SUMMARY
              echo "All checks passed. Good test coverage level." >> $GITHUB_STEP_SUMMARY
            elif [ "$COVERAGE" -gt 0 ]; then
              echo "### ‚ö†Ô∏è Status: Ready but Consider More Tests" >> $GITHUB_STEP_SUMMARY
              echo "All checks passed but test coverage could be improved." >> $GITHUB_STEP_SUMMARY
            else
              echo "### ‚ö†Ô∏è Status: Ready but No Tests" >> $GITHUB_STEP_SUMMARY
              echo "All checks passed but no tests found. Consider adding unit tests." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ‚ùå Status: Requires Attention" >> $GITHUB_STEP_SUMMARY
            echo "Some checks failed. Please review and fix issues before merging." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Report generated on $(date) by optimized CI pipeline*" >> $GITHUB_STEP_SUMMARY

  # Optional: Notification on failure
  notify-on-failure:
    needs: [main-pipeline, build-android, build-ios]
    if: always() && (failure() || cancelled())
    runs-on: ubuntu-latest
    timeout-minutes: 1
    
    steps:
      - name: Failure Notification
        run: |
          echo "üö® CI Pipeline failed for PR #${{ github.event.number }}"
          echo "Please check the failed jobs and address issues."
          # Add external notification here (Slack, Teams, etc.) if needed