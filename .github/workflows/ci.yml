# 🚀 UPDATED ci.yml - Ultimate Optimization
name: Pull Request Testing

on:
  pull_request:
    branches: [master, develop, preprod]
    paths-ignore: ['**.md', 'docs/**', '.gitignore']

env:
  NODE_VERSION: 22.11.0
  YARN_ENABLE_IMMUTABLE_INSTALLS: false
  CI: true

defaults:
  run:
    shell: bash

jobs:
  # 🎯 Single source of truth for ALL Node.js setup
  main-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      pr_version: ${{ steps.version.outputs.version }}
      target_branch: ${{ steps.branch.outputs.name }}
      coverage: ${{ steps.coverage.outputs.percentage }}
      should_build: ${{ steps.changes.outputs.should_build }}
      # 🆕 NEW: Share setup artifacts
      node_cache_key: ${{ steps.cache-deps.outputs.cache-primary-key }}
      js_bundle_android: js-bundle-android-${{ github.run_number }}
      js_bundle_ios: js-bundle-ios-${{ github.run_number }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E '\.(js|jsx|ts|tsx|json|lock)$|android/|ios/' > /dev/null; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "Code changes detected - will run full pipeline"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "Only documentation changes - skipping builds"
          fi

      # 🎯 MASTER Node.js setup - only place that installs
      - name: Setup Node.js Environment (Master)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Cache Dependencies (Master)
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
            ~/.npm
            ios/Pods
          key: deps-${{ runner.os }}-${{ hashFiles('yarn.lock', 'ios/Podfile.lock') }}
          restore-keys: deps-${{ runner.os }}-

      - name: Install Dependencies (Master)
        run: |
          yarn install --frozen-lockfile --prefer-offline
          echo "✅ Master dependencies installed: $(du -sh node_modules | cut -f1)"

      - name: Generate Metadata
        id: version
        run: |
          PR_NUMBER=${{ github.event.number }}
          BASE_VERSION=$(node -p "require('./package.json').version")
          SHORT_SHA=$(git rev-parse --short HEAD)
          PR_VERSION="$BASE_VERSION-pr.$PR_NUMBER.$SHORT_SHA"
          echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
          echo "Generated PR version: $PR_VERSION"

      - name: Set Target Branch
        id: branch
        run: echo "name=${{ github.base_ref }}" >> $GITHUB_OUTPUT

      - name: Code Quality Suite
        run: |
          echo "Running comprehensive quality checks..."
          yarn lint --format=json --output-file=lint-results.json &
          LINT_PID=$!
          yarn type-check --noEmit &
          TYPE_PID=$!
          yarn audit --level moderate --json > audit-results.json 2>/dev/null || echo "Security issues detected" &
          AUDIT_PID=$!
          
          wait $LINT_PID && echo "✅ Linting passed" || (echo "❌ Linting failed" && exit 1)
          wait $TYPE_PID && echo "✅ Type checking passed" || (echo "❌ Type checking failed" && exit 1)
          wait $AUDIT_PID

      - name: Test Suite with Coverage
        run: |
          yarn test:ci --coverage --watchAll=false --passWithNoTests
          if [ -f "coverage/coverage-summary.json" ] && command -v npx >/dev/null; then
            npx coverage-badges-cli --output coverage/badges 2>/dev/null || true
          fi

      - name: Extract Test Results
        id: coverage
        run: |
          COVERAGE="0"
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -p "
              try {
                const summary = require('./coverage/coverage-summary.json');
                Math.round(summary.total.lines.pct || 0);
              } catch(e) { 0; }
            ")
          fi
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Test coverage: $COVERAGE%"

      # 🎯 Create JS bundles ONCE for all platforms
      - name: Create JavaScript Bundles
        if: steps.changes.outputs.should_build == 'true'
        run: |
          echo "📦 Creating JavaScript bundles for all platforms..."
          
          # Android bundle
          mkdir -p dist/android
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output dist/android/index.android.bundle \
            --assets-dest dist/android/assets/ \
            --minify true
          
          # iOS bundle  
          mkdir -p dist/ios
          npx react-native bundle \
            --platform ios \
            --dev false \
            --entry-file index.js \
            --bundle-output dist/ios/main.jsbundle \
            --assets-dest dist/ios/assets/ \
            --minify true
          
          # Report sizes
          android_size=$(ls -lh dist/android/index.android.bundle | awk '{print $5}')
          ios_size=$(ls -lh dist/ios/main.jsbundle | awk '{print $5}')
          echo "✅ Android bundle: $android_size"
          echo "✅ iOS bundle: $ios_size"

      # 🎯 Upload bundles as artifacts  
      - name: Upload JavaScript Bundles
        if: steps.changes.outputs.should_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: js-bundle-android-${{ github.run_number }}
          path: dist/android/
          retention-days: 1

      - name: Upload iOS Bundle
        if: steps.changes.outputs.should_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: js-bundle-ios-${{ github.run_number }}  
          path: dist/ios/
          retention-days: 1

      - name: Bundle Analysis
        if: steps.changes.outputs.should_build == 'true'
        run: |
          echo "## 📦 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          if [ -f "dist/android/index.android.bundle" ]; then
            bundle_size=$(ls -lh dist/android/index.android.bundle | awk '{print $5}')
            bundle_bytes=$(wc -c < dist/android/index.android.bundle)
            echo "- **Android Bundle Size:** $bundle_size" >> $GITHUB_STEP_SUMMARY
            
            if [ "$bundle_bytes" -lt 2097152 ]; then
              echo "- **Status:** 🎉 Excellent (< 2MB)" >> $GITHUB_STEP_SUMMARY
            elif [ "$bundle_bytes" -lt 5242880 ]; then
              echo "- **Status:** ✅ Good (< 5MB)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status:** ⚠️ Large bundle - consider optimization" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Performance Check
        continue-on-error: true
        run: |
          echo "## ⚡ Performance Metrics" >> $GITHUB_STEP_SUMMARY
          start_time=$(date +%s%3N)
          timeout 30s npx react-native start --reset-cache >/dev/null 2>&1 &
          METRO_PID=$!
          sleep 20
          kill $METRO_PID 2>/dev/null || true
          wait $METRO_PID 2>/dev/null || true
          end_time=$(date +%s%3N)
          
          metro_time=$(( (end_time - start_time) / 1000 ))
          echo "- **Metro Start Time:** ${metro_time}s" >> $GITHUB_STEP_SUMMARY

      - name: Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.event.number }}
          path: |
            coverage/
            lint-results.json
            audit-results.json
          retention-days: 7

  # 🚀 Optimized Android build - no Node.js setup!
  build-android:
    needs: main-pipeline
    if: needs.main-pipeline.outputs.should_build == 'true'
    uses: ./.github/workflows/android-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.main-pipeline.outputs.pr_version }}
      version_code: "99"
      branch: ${{ needs.main-pipeline.outputs.target_branch }}
      # 🎯 NEW: Skip Node.js setup entirely
      skip_node_setup: true
      js_bundle_artifact: ${{ needs.main-pipeline.outputs.js_bundle_android }}
    secrets: inherit

  # 🚀 Optimized iOS build - no Node.js setup!
  build-ios:
    needs: main-pipeline
    if: needs.main-pipeline.outputs.should_build == 'true'
    uses: ./.github/workflows/ios-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.main-pipeline.outputs.pr_version }}
      version_code: "99"
      branch: ${{ needs.main-pipeline.outputs.target_branch }}
      # 🎯 NEW: Skip Node.js setup entirely
      skip_node_setup: true
      js_bundle_artifact: ${{ needs.main-pipeline.outputs.js_bundle_ios }}
    secrets: inherit

  # 🎯 Lightweight summary - no checkout/setup needed
  pr-summary:
    needs: [main-pipeline, build-android, build-ios]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 2
    
    steps:
      - name: Generate Final Summary
        run: |
          echo "## 🚀 Pull Request Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Version:** ${{ needs.main-pipeline.outputs.pr_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Branch:** ${{ needs.main-pipeline.outputs.target_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Coverage:** ${{ needs.main-pipeline.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          MAIN_STATUS="${{ needs.main-pipeline.result }}"
          ANDROID_STATUS="${{ needs.build-android.result }}"
          IOS_STATUS="${{ needs.build-ios.result }}"
          
          echo "### 🔍 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality:** $([ "$MAIN_STATUS" = "success" ] && echo "✅ Passed" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Build:** $([ "$ANDROID_STATUS" = "success" ] && echo "✅ Success" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
          echo "- **iOS Build:** $([ "$IOS_STATUS" = "success" ] && echo "✅ Success" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "$MAIN_STATUS" = "success" ] && [ "$ANDROID_STATUS" = "success" ] && [ "$IOS_STATUS" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🎉 Status: Ready to Merge!" >> $GITHUB_STEP_SUMMARY
            echo "All checks passed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ❌ Status: Requires Attention" >> $GITHUB_STEP_SUMMARY
            echo "Some checks failed. Please review and fix issues." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Optimized pipeline completed on $(date)*" >> $GITHUB_STEP_SUMMARY