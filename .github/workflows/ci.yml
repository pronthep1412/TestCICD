# ci-logic-fix-only.yml - ‡πÅ‡∏Å‡πâ‡πÅ‡∏Ñ‡πà Logic ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
name: Pull Request Testing

on:
  pull_request:
    branches:
      - "master"
      - "develop"
      - "preprod"

env:
  NODE_VERSION: 20.18.0

jobs:
  # Main testing and validation
  test-and-validate:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      pr_version: ${{ steps.version.outputs.version }}
      version_code: ${{ steps.version.outputs.version_code }}
      target_branch: ${{ steps.branch.outputs.name }}
      coverage: ${{ steps.coverage.outputs.percentage }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-deps-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install Dependencies
        run: yarn ci

      - name: Generate PR Version
        id: version
        run: |
          PR_NUMBER=${{ github.event.number }}
          BASE_VERSION=$(node -p "require('./package.json').version")
          PR_VERSION="$BASE_VERSION-pr.$PR_NUMBER"
          
          # Generate version code (timestamp + PR number for uniqueness)
          TIMESTAMP=$(date +%s)
          VERSION_CODE="${TIMESTAMP}${PR_NUMBER}"
          
          echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "Generated PR version: $PR_VERSION"
          echo "Generated version code: $VERSION_CODE"

      - name: Set Target Branch  
        id: branch
        run: |
          TARGET_BRANCH=${{ github.base_ref }}
          echo "name=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "Target branch: $TARGET_BRANCH"

      # Quality Checks
      - name: Code Linting
        run: yarn lint

      - name: Type Checking
        run: yarn type-check

      - name: Security Audit
        run: |
          echo "## üîç Security Audit Results" >> $GITHUB_STEP_SUMMARY
          if yarn audit --audit-level moderate --json > audit-results.json 2>/dev/null; then
            echo "‚úÖ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Security vulnerabilities detected - check logs for details" >> $GITHUB_STEP_SUMMARY
            yarn audit --audit-level moderate || true
          fi

      - name: Unit & Integration Tests with Coverage
        run: yarn test:ci

      - name: Extract Coverage Percentage (Simplified)
        id: coverage
        run: |
          COVERAGE="0"
          
          # ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ unit tests, coverage ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
          # ‡πÅ‡∏Ñ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Jest run ‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -p "
              try {
                const summary = JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json'));
                summary.total.lines.pct || 0;
              } catch(e) { 0; }
            " 2>/dev/null || echo "0")
          fi
          
          # Validate ‡πÅ‡∏•‡∏∞ fallback
          if ! echo "$COVERAGE" | grep -q '^[0-9]*\.*[0-9]*$'; then
            COVERAGE="0"
          fi
          
          if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "" ]; then
            COVERAGE="0"
          fi
          
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"

      - name: Coverage Report
        run: |
          echo "## üìä Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          COVERAGE="${{ steps.coverage.outputs.percentage }}"
          echo "- **Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "coverage" ]; then
            echo "- **Detailed Report:** Available in artifacts" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Detailed Report:** No coverage files generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ unit tests, coverage ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0 - ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥
          if [ "$COVERAGE" = "0" ]; then
            echo "- **‚ÑπÔ∏è Info:** No unit tests found - consider adding tests for better code quality" >> $GITHUB_STEP_SUMMARY
          elif [ "$(awk "BEGIN {print ($COVERAGE >= 70) ? 1 : 0}")" = "1" ]; then
            echo "- **‚úÖ Good:** Coverage meets recommended threshold (‚â•70%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **‚ö†Ô∏è Warning:** Coverage below 70% recommended threshold" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.event.number }}
          path: |
            coverage/
            jest-coverage/
          retention-days: 7

  # Build testing for Android
  build-android-test:
    needs: test-and-validate
    uses: ./.github/workflows/android-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.test-and-validate.outputs.pr_version }}
      # Remove version_code if android-build.yml doesn't accept it
      # version_code: ${{ needs.test-and-validate.outputs.version_code }}
      branch: ${{ needs.test-and-validate.outputs.target_branch }}
    secrets: inherit

  # Build testing for iOS
  build-ios-test:
    needs: test-and-validate  
    uses: ./.github/workflows/ios-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.test-and-validate.outputs.pr_version }}
      # Remove version_code if ios-build.yml doesn't accept it
      # version_code: ${{ needs.test-and-validate.outputs.version_code }}
      branch: ${{ needs.test-and-validate.outputs.target_branch }}
    secrets: inherit

  # Bundle analysis
  bundle-analysis:
    needs: test-and-validate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install Dependencies
        run: yarn ci

      - name: Bundle Size Analysis
        run: |
          echo "## üì¶ Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          
          start_time=$(date +%s)
          bundle_created=false
          
          # Try React Native bundle
          if command -v react-native >/dev/null 2>&1; then
            if react-native bundle \
              --platform android \
              --dev false \
              --entry-file index.js \
              --bundle-output /tmp/index.android.bundle \
              --assets-dest /tmp/ >/dev/null 2>&1; then
              bundle_created=true
              bundle_path="/tmp/index.android.bundle"
            fi
          fi
          
          # Fallback: Metro via npx
          if [ "$bundle_created" = false ] && command -v npx >/dev/null 2>&1; then
            if npx react-native bundle \
              --platform android \
              --dev false \
              --entry-file index.js \
              --bundle-output /tmp/index.android.bundle >/dev/null 2>&1; then
              bundle_created=true
              bundle_path="/tmp/index.android.bundle"
            fi
          fi
          
          # Estimate from source files
          if [ "$bundle_created" = false ]; then
            total_size=$(find . -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" 2>/dev/null | xargs wc -c 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
            estimated_size=$((total_size * 2))
            echo "$estimated_size" > /tmp/estimated.bundle
            bundle_path="/tmp/estimated.bundle"
            bundle_created=true
            ESTIMATION_NOTE=" (estimated)"
          fi
          
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          
          if [ "$bundle_created" = true ] && [ -f "$bundle_path" ]; then
            bundle_size=$(ls -lh "$bundle_path" | awk '{print $5}')
            bundle_bytes=$(wc -c < "$bundle_path")
            
            echo "- **‚úÖ Bundle Analysis:** Completed" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Time:** ${build_time}s" >> $GITHUB_STEP_SUMMARY
            echo "- **Android Bundle Size:** $bundle_size${ESTIMATION_NOTE:-}" >> $GITHUB_STEP_SUMMARY
            
            # Size evaluation
            if [ "$bundle_bytes" -lt 1048576 ]; then
              echo "- **üìä Size Status:** ‚úÖ Excellent (< 1MB)" >> $GITHUB_STEP_SUMMARY
            elif [ "$bundle_bytes" -lt 5242880 ]; then
              echo "- **üìä Size Status:** ‚úÖ Good (< 5MB)" >> $GITHUB_STEP_SUMMARY
            elif [ "$bundle_bytes" -lt 10485760 ]; then
              echo "- **üìä Size Status:** ‚ö†Ô∏è Large (< 10MB)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **üìä Size Status:** ‚ùå Very Large (> 10MB)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **‚ö†Ô∏è Bundle Analysis:** Could not create bundle" >> $GITHUB_STEP_SUMMARY
          fi

  # PR Summary (Fixed Logic for No Unit Tests)
  pr-summary:
    needs: [test-and-validate, build-android-test, build-ios-test, bundle-analysis]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: PR Summary (Fixed for No Unit Tests)
        run: |
          echo "## üöÄ Pull Request Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Version:** ${{ needs.test-and-validate.outputs.pr_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Code:** ${{ needs.test-and-validate.outputs.version_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Branch:** ${{ needs.test-and-validate.outputs.target_branch }}" >> $GITHUB_STEP_SUMMARY
          
          # Handle coverage - ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "Unable to determine"
          COVERAGE="${{ needs.test-and-validate.outputs.coverage }}"
          echo "- **Test Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Linting:** ${{ needs.test-and-validate.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type Check:** ${{ needs.test-and-validate.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests:** ${{ needs.test-and-validate.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Audit:** ${{ needs.test-and-validate.result == 'success' && '‚úÖ Completed' || '‚ö†Ô∏è Issues Found' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì± Build Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Android Build:** ${{ needs.build-android-test.result == 'success' && '‚úÖ Passed' || needs.build-android-test.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **iOS Build:** ${{ needs.build-ios-test.result == 'success' && '‚úÖ Passed' || needs.build-ios-test.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Analysis:** ${{ needs.bundle-analysis.result == 'success' && '‚úÖ Completed' || '‚ö†Ô∏è Partial' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Fixed Overall Status Logic - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ unit tests
          TEST_SUCCESS="${{ needs.test-and-validate.result == 'success' }}"
          ANDROID_OK="${{ needs.build-android-test.result != 'failure' }}"
          IOS_OK="${{ needs.build-ios-test.result != 'failure' }}"
          COVERAGE="${{ needs.test-and-validate.outputs.coverage }}"
          
          if [ "$TEST_SUCCESS" = "true" ] && [ "$ANDROID_OK" = "true" ] && [ "$IOS_OK" = "true" ]; then
            if [ "$COVERAGE" = "0" ]; then
              echo "### ‚ö†Ô∏è Overall Status: Ready but No Tests" >> $GITHUB_STEP_SUMMARY
              echo "All checks passed but no unit tests found. Consider adding tests for better code quality." >> $GITHUB_STEP_SUMMARY
            elif [ "$(awk "BEGIN {print ($COVERAGE >= 70) ? 1 : 0}")" = "1" ]; then
              echo "### ‚úÖ Overall Status: Ready for Review" >> $GITHUB_STEP_SUMMARY
              echo "All checks passed and coverage is adequate (${COVERAGE}%)." >> $GITHUB_STEP_SUMMARY
            else
              echo "### ‚ö†Ô∏è Overall Status: Ready but Low Coverage" >> $GITHUB_STEP_SUMMARY
              echo "All checks passed but consider improving test coverage (${COVERAGE}%)." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ‚ùå Overall Status: Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "Please fix the failing checks before merging." >> $GITHUB_STEP_SUMMARY
          fi