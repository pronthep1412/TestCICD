# ci.yml - Manual Platform Testing Control
# 🎯 MANUAL PLATFORM TESTING:
# - ใช้ labels หรือ PR title ควบคุมการ test platform
# - Default: ไม่รัน platform builds (ประหยัดเวลาสูงสุด)
# - Manual control: เพิ่ม labels หรือ [Android]/[iOS] ใน title
name: Pull Request Testing

on:
  pull_request:
    branches:
      - master
      - develop  
      - preprod
    paths:
      - 'src/**'
      - 'components/**'
      - '__tests__/**'
      - 'test/**'
      - 'package.json'
      - 'package-lock.json'
      - 'yarn.lock'
      - 'metro.config.js'
      - 'babel.config.js'
      - 'react-native.config.js'
      - 'index.js'
      - 'index.ts'
      - '.env*'
      - '.github/workflows/**'

env:
  NODE_VERSION: 22.11.0
  # 🎛️ PLATFORM CONTROL VARIABLES - MANUAL CONTROL MODE
  # ปรับค่าเหล่านี้เพื่อควบคุมการ test platforms
  TEST_ANDROID: 'auto'        # Default: ปิด (เปิดด้วย label/title)
  TEST_IOS: 'auto'            # Default: ปิด (เปิดด้วย label/title)

jobs:
  
  test-and-validate:
    runs-on: ubuntu-latest
    outputs:
      pr_version: ${{ steps.version.outputs.version }}
      pr_version_code: ${{ steps.version.outputs.version_code }}
      target_branch: ${{ steps.branch.outputs.name }}
      coverage: ${{ steps.coverage.outputs.percentage }}
      test_android: ${{ steps.platforms.outputs.test_android }}
      test_ios: ${{ steps.platforms.outputs.test_ios }}
      
    steps:
      #ดึงโค้ดใน git มาประมวลผล 
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      #ติดตั้ง node + cache optimization
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      # เพิ่ม cache สำหรับ dependencies เพื่อลดเวลา install
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      #ติดตั้ง module install (เร็วขึ้นด้วย cache)
      - name: Install Dependencies
        run: |
          # ใช้ --prefer-offline เพื่อใช้ cache ก่อน
          yarn install --frozen-lockfile --prefer-offline
          echo "✅ Dependencies installed: $(du -sh node_modules | cut -f1)"

      #สร้าง version number อัพ store
      - name: Generate PR Version
        id: version
        run: |
          PR_NUMBER=${{ github.event.number }}
          BASE_VERSION=$(node -p "require('./package.json').version")
          PR_VERSION="$BASE_VERSION-pr.$PR_NUMBER"
          # ✅ Flutter style: Consistent version code for PR testing
          PR_VERSION_CODE=99
          echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$PR_VERSION_CODE" >> $GITHUB_OUTPUT
          echo "📋 PR Version: $PR_VERSION (code: $PR_VERSION_CODE)"

      #เก็บข้อมูลว่า PR นี้จะ merge เข้า branch ไหน
      - name: Set Target Branch  
        id: branch
        run: |
          TARGET_BRANCH=${{ github.base_ref }}
          echo "name=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "Target branch: $TARGET_BRANCH"

      # 🎯 MANUAL PLATFORM DETECTION
      - name: Detect Required Platforms
        id: platforms
        run: |
          # เริ่มต้นด้วยค่า default
          TEST_ANDROID="${{ env.TEST_ANDROID }}"
          TEST_IOS="${{ env.TEST_IOS }}"
          
          echo "🔍 Initial platform settings:"
          echo "  TEST_ANDROID: $TEST_ANDROID"
          echo "  TEST_IOS: $TEST_IOS"
          
          # 🎯 Manual Control Only - ตรวจสอบจาก labels และ PR title
          
          # Check PR labels
          if echo "${{ github.event.pull_request.labels.*.name }}" | grep -i "test-android" > /dev/null; then
            echo "🏷️ 'test-android' label detected - enabling Android testing"
            TEST_ANDROID="true"
          fi
          
          if echo "${{ github.event.pull_request.labels.*.name }}" | grep -i "test-ios" > /dev/null; then
            echo "🏷️ 'test-ios' label detected - enabling iOS testing"
            TEST_IOS="true"
          fi
          
          # Check PR title
          if echo "${{ github.event.pull_request.title }}" | grep -E "\[Android\]|\[android\]" > /dev/null; then
            echo "📝 '[Android]' in PR title - enabling Android testing"
            TEST_ANDROID="true"
          fi
          
          if echo "${{ github.event.pull_request.title }}" | grep -E "\[iOS\]|\[ios\]" > /dev/null; then
            echo "📝 '[iOS]' in PR title - enabling iOS testing"
            TEST_IOS="true"
          fi
          
          # Output final decisions
          echo "test_android=$TEST_ANDROID" >> $GITHUB_OUTPUT
          echo "test_ios=$TEST_IOS" >> $GITHUB_OUTPUT
          
          echo ""
          echo "🎯 Final platform testing decisions:"
          echo "  Android: $TEST_ANDROID"
          echo "  iOS: $TEST_IOS"
          echo "  PR title: ${{ github.event.pull_request.title }}"
          echo "  PR labels: ${{ github.event.pull_request.labels.*.name }}"
          echo "  Mode: Manual Control Only"
          
          # Determine bundle creation
          CREATE_ANDROID_BUNDLE="false"
          CREATE_IOS_BUNDLE="false"
          
          if [ "$TEST_ANDROID" = "true" ]; then
            CREATE_ANDROID_BUNDLE="true"
          fi
          
          if [ "$TEST_IOS" = "true" ]; then
            CREATE_IOS_BUNDLE="true"
          fi
          
          echo "create_android_bundle=$CREATE_ANDROID_BUNDLE" >> $GITHUB_OUTPUT
          echo "create_ios_bundle=$CREATE_IOS_BUNDLE" >> $GITHUB_OUTPUT

      ##################################################
      #เซตนี้เป็น Quality Gates เพื่อตรวจสอบคุณภาพโค้ดก่อน merge
      - name: Code Linting
        run: yarn lint

      - name: Type Checking
        run: yarn type-check

      - name: Security Audit
        run: |
          echo "## 🔍 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          if yarn audit --audit-level moderate --json > audit-results.json 2>/dev/null; then
            echo "✅ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security vulnerabilities detected - check logs for details" >> $GITHUB_STEP_SUMMARY
            yarn audit --audit-level moderate || true
          fi
      ##################################################
      ##################################################

      ##################################################
      #เซตนี้เป็น Testing Pipeline เพื่อตรวจสอบว่าโค้ดทำงานถูกต้องและครอบคลุมเพียงใด
      - name: Unit & Integration Tests with Coverage
        run: yarn test:ci

      - name: Extract Coverage Percentage
        id: coverage
        run: |
          COVERAGE="0"
          
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -p "
              try {
                const summary = JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json'));
                summary.total.lines.pct || 0;
              } catch(e) { 0; }
            " 2>/dev/null || echo "0")
          fi
          
          # Validate และ fallback
          if ! echo "$COVERAGE" | grep -q '^[0-9]*\.*[0-9]*$'; then
            COVERAGE="0"
          fi
          
          if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "" ]; then
            COVERAGE="0"
          fi
          
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"
      ##################################################
      ##################################################

      ##################################################
      #การแสดงผล + วิเคราะห์ coverage
      - name: Coverage Report
        run: |
          echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          COVERAGE="${{ steps.coverage.outputs.percentage }}"
          echo "- **Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "coverage" ]; then
            echo "- **Detailed Report:** Available in artifacts" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Detailed Report:** No coverage files generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$COVERAGE" = "0" ]; then
            echo "- **ℹ️ Info:** No unit tests found - consider adding tests for better code quality" >> $GITHUB_STEP_SUMMARY
          elif [ "$(awk "BEGIN {print ($COVERAGE >= 70) ? 1 : 0}")" = "1" ]; then
            echo "- **✅ Good:** Coverage meets recommended threshold (≥70%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **⚠️ Warning:** Coverage below 70% recommended threshold" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.event.number }}
          path: |
            coverage/
            jest-coverage/
          retention-days: 7
      ##################################################
      ##################################################

      ##################################################
      #เอาไว้สร้าง JavaScript bundles ตามความต้องการ (Dynamic Bundle Creation)
      - name: Create JS Bundles for Sharing
        run: |
          echo "📦 Creating JavaScript bundles based on platform requirements..."
          
          ANDROID_NEEDED="${{ steps.platforms.outputs.create_android_bundle }}"
          IOS_NEEDED="${{ steps.platforms.outputs.create_ios_bundle }}"
          
          echo "Bundle creation plan:"
          echo "  Android bundle: $ANDROID_NEEDED"
          echo "  iOS bundle: $IOS_NEEDED"
          
          # Create Android bundle if needed
          if [ "$ANDROID_NEEDED" = "true" ]; then
            echo "🤖 Creating Android bundle..."
            mkdir -p bundles/android
            npx react-native bundle \
              --platform android \
              --dev false \
              --entry-file index.js \
              --bundle-output bundles/android/index.android.bundle \
              --assets-dest bundles/android/assets/ \
              --minify true
            echo "✅ Android bundle created"
          else
            echo "⏭️ Skipping Android bundle creation"
          fi
          
          # Create iOS bundle if needed  
          if [ "$IOS_NEEDED" = "true" ]; then
            echo "📱 Creating iOS bundle..."
            mkdir -p bundles/ios
            npx react-native bundle \
              --platform ios \
              --dev false \
              --entry-file index.js \
              --bundle-output bundles/ios/main.jsbundle \
              --assets-dest bundles/ios/assets/ \
              --minify true
            echo "✅ iOS bundle created"
          else
            echo "⏭️ Skipping iOS bundle creation"
          fi
          
          echo "🎯 Bundle creation completed based on platform requirements"

      - name: Upload Android Bundle
        if: steps.platforms.outputs.create_android_bundle == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: js-bundle-android-${{ github.run_number }}
          path: bundles/android/
          retention-days: 1

      - name: Upload iOS Bundle
        if: steps.platforms.outputs.create_ios_bundle == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: js-bundle-ios-${{ github.run_number }}
          path: bundles/ios/
          retention-days: 1
      ##################################################
      ##################################################

  
  # 🤖 CONDITIONAL ANDROID BUILD
  # รันเฉพาะเมื่อ platform detection กำหนดให้ test Android
  build-android-test:
    needs: test-and-validate
    if: needs.test-and-validate.outputs.test_android == 'true'
    uses: ./.github/workflows/android-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.test-and-validate.outputs.pr_version }}
      version_code: ${{ needs.test-and-validate.outputs.pr_version_code }}
      branch: ${{ needs.test-and-validate.outputs.target_branch }}
      js_bundle_artifact: js-bundle-android-${{ github.run_number }}
    secrets: inherit

  # � CONDITIONAL iOS BUILD  
  # รันเฉพาะเมื่อ platform detection กำหนดให้ test iOS
  build-ios-test:
    needs: test-and-validate
    if: needs.test-and-validate.outputs.test_ios == 'true'
    uses: ./.github/workflows/ios-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.test-and-validate.outputs.pr_version }}
      version_code: ${{ needs.test-and-validate.outputs.pr_version_code }}
      branch: ${{ needs.test-and-validate.outputs.target_branch }}
      js_bundle_artifact: js-bundle-ios-${{ github.run_number }}
    secrets: inherit

  #สรุปการ build test - Smart summary based on tested platforms
  pr-summary:
    needs: [test-and-validate, build-android-test, build-ios-test]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: PR Summary
        run: |
          echo "## 🚀 Pull Request Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Version:** ${{ needs.test-and-validate.outputs.pr_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage:** ${{ needs.test-and-validate.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          
          # Platform testing summary
          ANDROID_TESTED="${{ needs.test-and-validate.outputs.test_android }}"
          IOS_TESTED="${{ needs.test-and-validate.outputs.test_ios }}"
          
          echo "- **Platform Testing:**" >> $GITHUB_STEP_SUMMARY
          if [ "$ANDROID_TESTED" = "true" ] && [ "$IOS_TESTED" = "true" ]; then
            echo "  - 🎯 Full testing: Both Android & iOS" >> $GITHUB_STEP_SUMMARY
          elif [ "$ANDROID_TESTED" = "true" ] && [ "$IOS_TESTED" = "false" ]; then
            echo "  - 🤖 Android only (iOS will test in CD)" >> $GITHUB_STEP_SUMMARY
          elif [ "$ANDROID_TESTED" = "false" ] && [ "$IOS_TESTED" = "true" ]; then
            echo "  - 📱 iOS only (Android will test in CD)" >> $GITHUB_STEP_SUMMARY
          else
            echo "  - ⚠️ No platform builds (check configuration)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Status check with platform-aware logic
          TESTS_PASSED="${{ needs.test-and-validate.result }}"
          ANDROID_RESULT="${{ needs.build-android-test.result }}"
          IOS_RESULT="${{ needs.build-ios-test.result }}"
          
          OVERALL_SUCCESS="true"
          ISSUES=()
          
          # Check test results
          if [ "$TESTS_PASSED" != "success" ]; then
            OVERALL_SUCCESS="false"
            ISSUES+=("Fix test failures")
          fi
          
          # Check Android build if it was supposed to run
          if [ "$ANDROID_TESTED" = "true" ] && [ "$ANDROID_RESULT" != "success" ] && [ "$ANDROID_RESULT" != "skipped" ]; then
            OVERALL_SUCCESS="false" 
            ISSUES+=("Fix Android build issues")
          fi
          
          # Check iOS build if it was supposed to run
          if [ "$IOS_TESTED" = "true" ] && [ "$IOS_RESULT" != "success" ] && [ "$IOS_RESULT" != "skipped" ]; then
            OVERALL_SUCCESS="false"
            ISSUES+=("Fix iOS build issues")
          fi
          
          # Generate final summary
          if [ "$OVERALL_SUCCESS" = "true" ]; then
            echo "### ✅ Ready for Merge" >> $GITHUB_STEP_SUMMARY
            echo "- All required tests and builds completed successfully" >> $GITHUB_STEP_SUMMARY
            
            # Show what will happen after merge
            if [ "$ANDROID_TESTED" = "false" ] || [ "$IOS_TESTED" = "false" ]; then
              echo "- Untested platforms will build automatically in CD pipeline" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ❌ Issues Found" >> $GITHUB_STEP_SUMMARY
            for issue in "${ISSUES[@]}"; do
              echo "- $issue" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          # Platform control hints
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💡 Platform Control Tips" >> $GITHUB_STEP_SUMMARY
          echo "- Use \`[iOS]\` in PR title to force iOS testing" >> $GITHUB_STEP_SUMMARY
          echo "- Use \`[Android]\` in PR title to force Android testing" >> $GITHUB_STEP_SUMMARY  
          echo "- Add labels: \`test-ios\` or \`test-android\` for manual control" >> $GITHUB_STEP_SUMMARY
          echo "- Manual control only - no auto-detection" >> $GITHUB_STEP_SUMMARY
          
# 📋 USAGE EXAMPLES:
# 
# 1. Default (fastest, recommended):
#    - No labels, no [Platform] in title
#    - Only tests will run (~1-2 minutes)
#    - Platform builds skipped to save time
#
# 2. Android-only testing:
#    - Add [Android] to PR title
#    - Or add 'test-android' label
#    - Or set TEST_ANDROID: 'true'
#    - Only Android build will run (~3-5 minutes)
#
# 3. iOS-only testing:
#    - Add [iOS] to PR title
#    - Or add 'test-ios' label  
#    - Or set TEST_IOS: 'true'
#    - Only iOS build will run (~8-10 minutes)
#
# 4. Full testing (both platforms):
#    - Add both 'test-ios' and 'test-android' labels
#    - Or add both [Android] and [iOS] to title
#    - Or set both TEST_ANDROID: 'true', TEST_IOS: 'true'
#    - Both builds will run (~12-15 minutes)
#
# 5. Force override via environment:
#    - Set TEST_ANDROID: 'true', TEST_IOS: 'false'
#    - Ignores labels and title completely