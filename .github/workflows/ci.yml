# ci.yml - Super Simple Version (เดิม + เพิ่ม bundle sharing)
name: Pull Request Testing

on:
  pull_request:
    branches:
      - master
      - develop
      - preprod

env:
  NODE_VERSION: 22.11.0

jobs:
  
  test-and-validate:
    runs-on: ubuntu-latest
    outputs:
      pr_version: ${{ steps.version.outputs.version }}
      pr_version_code: ${{ steps.version.outputs.version_code }}
      target_branch: ${{ steps.branch.outputs.name }}
      coverage: ${{ steps.coverage.outputs.percentage }}
      should_build: ${{ steps.changes.outputs.should_build }}
      
    steps:
      #ดึงโค้ดใน git มาประมวลผล 
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      #โค้ดนี้เป็น GitHub Actions step ที่ใช้ตรวจสอบว่าไฟล์ที่เปลี่ยนแปลงใน commit ล่าสุดมีไฟล์ประเภทที่ต้องการ build หรือไม่
      - name: Check Changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E '\.(js|jsx|ts|tsx|json|lock)$|android/|ios/' > /dev/null; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      #ติดตั้ง node
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      #ติดตั้ง module install
      - name: Install Dependencies
        run: |
          yarn install --frozen-lockfile
          echo "✅ Dependencies installed: $(du -sh node_modules | cut -f1)"

      #สร้าง version number อัพ store
      - name: Generate PR Version
        id: version
        run: |
          PR_NUMBER=${{ github.event.number }}
          BASE_VERSION=$(node -p "require('./package.json').version")
          PR_VERSION="$BASE_VERSION-pr.$PR_NUMBER"
          # ✅ Flutter style: Consistent version code for PR testing
          PR_VERSION_CODE=99
          echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$PR_VERSION_CODE" >> $GITHUB_OUTPUT
          echo "📋 PR Version: $PR_VERSION (code: $PR_VERSION_CODE)"

      #เก็บข้อมูลว่า PR นี้จะ merge เข้า branch ไหน
      - name: Set Target Branch  
        id: branch
        run: |
          TARGET_BRANCH=${{ github.base_ref }}
          echo "name=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "Target branch: $TARGET_BRANCH"

      ##################################################
      #เซตนี้เป็น Quality Gates เพื่อตรวจสอบคุณภาพโค้ดก่อน merge
      - name: Code Linting
        run: yarn lint

      - name: Type Checking
        run: yarn type-check

      - name: Security Audit
        run: |
          echo "## 🔍 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          if yarn audit --audit-level moderate --json > audit-results.json 2>/dev/null; then
            echo "✅ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security vulnerabilities detected - check logs for details" >> $GITHUB_STEP_SUMMARY
            yarn audit --audit-level moderate || true
          fi
      ##################################################
      ##################################################

      ##################################################
      #เซตนี้เป็น Testing Pipeline เพื่อตรวจสอบว่าโค้ดทำงานถูกต้องและครอบคลุมเพียงใด
      - name: Unit & Integration Tests with Coverage
        run: yarn test:ci

      - name: Extract Coverage Percentage
        id: coverage
        run: |
          COVERAGE="0"
          
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -p "
              try {
                const summary = JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json'));
                summary.total.lines.pct || 0;
              } catch(e) { 0; }
            " 2>/dev/null || echo "0")
          fi
          
          # Validate และ fallback
          if ! echo "$COVERAGE" | grep -q '^[0-9]*\.*[0-9]*$'; then
            COVERAGE="0"
          fi
          
          if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "" ]; then
            COVERAGE="0"
          fi
          
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"
      ##################################################
      ##################################################

        #การแสดงผล + วิเคราะห์ coverage หลังจาก Testing Pipeline เสร็จแล้ว
      - name: Coverage Report
        run: |
          echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          COVERAGE="${{ steps.coverage.outputs.percentage }}"
          echo "- **Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "coverage" ]; then
            echo "- **Detailed Report:** Available in artifacts" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Detailed Report:** No coverage files generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$COVERAGE" = "0" ]; then
            echo "- **ℹ️ Info:** No unit tests found - consider adding tests for better code quality" >> $GITHUB_STEP_SUMMARY
          elif [ "$(awk "BEGIN {print ($COVERAGE >= 70) ? 1 : 0}")" = "1" ]; then
            echo "- **✅ Good:** Coverage meets recommended threshold (≥70%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **⚠️ Warning:** Coverage below 70% recommended threshold" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.event.number }}
          path: |
            coverage/
            jest-coverage/
          retention-days: 7
      ##################################################
      ##################################################

      ##################################################
      #เอาไว้สร้าง JavaScript bundles ล่วงหน้า แล้วแชร์ให้ Android/iOS build jobs ใช้ร่วมกัน
      - name: Create JS Bundles for Sharing
        if: steps.changes.outputs.should_build == 'true'
        run: |
          echo "📦 Creating JavaScript bundles..."
          
          # Android bundle
          mkdir -p bundles/android
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output bundles/android/index.android.bundle \
            --assets-dest bundles/android/assets/ \
            --minify true
          
          # iOS bundle  
          mkdir -p bundles/ios
          npx react-native bundle \
            --platform ios \
            --dev false \
            --entry-file index.js \
            --bundle-output bundles/ios/main.jsbundle \
            --assets-dest bundles/ios/assets/ \
            --minify true
          
          echo "✅ Bundles created successfully"

      - name: Upload Android Bundle
        if: steps.changes.outputs.should_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: js-bundle-android-${{ github.run_number }}
          path: bundles/android/
          retention-days: 1

      - name: Upload iOS Bundle
        if: steps.changes.outputs.should_build == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: js-bundle-ios-${{ github.run_number }}
          path: bundles/ios/
          retention-days: 1
      ##################################################
      ##################################################

  
  # Build testing for Android - with bundle sharing
  build-android-test:
    needs: test-and-validate
    if: needs.test-and-validate.outputs.should_build == 'true'
    uses: ./.github/workflows/android-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.test-and-validate.outputs.pr_version }}
      version_code: ${{ needs.test-and-validate.outputs.pr_version_code }}
      branch: ${{ needs.test-and-validate.outputs.target_branch }}
      js_bundle_artifact: js-bundle-android-${{ github.run_number }}
    secrets: inherit

  # Build testing for iOS - with bundle sharing
  build-ios-test:
    needs: test-and-validate  
    if: needs.test-and-validate.outputs.should_build == 'true'
    uses: ./.github/workflows/ios-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.test-and-validate.outputs.pr_version }}
      version_code: ${{ needs.test-and-validate.outputs.pr_version_code }}
      branch: ${{ needs.test-and-validate.outputs.target_branch }}
      js_bundle_artifact: js-bundle-ios-${{ github.run_number }}
    secrets: inherit

  #สรุปการ build
  pr-summary:
    needs: [test-and-validate, build-android-test, build-ios-test]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: PR Summary
        run: |
          echo "## 🚀 Pull Request Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Version:** ${{ needs.test-and-validate.outputs.pr_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage:** ${{ needs.test-and-validate.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Simple status check
          if [ "${{ needs.test-and-validate.result }}" = "success" ]; then
            if [ "${{ needs.test-and-validate.outputs.should_build }}" = "true" ]; then
              echo "### ✅ Ready: Tests passed, builds completed" >> $GITHUB_STEP_SUMMARY
            else
              echo "### ✅ Ready: Tests passed (builds skipped)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ❌ Issues: Please fix failing checks" >> $GITHUB_STEP_SUMMARY
          fi