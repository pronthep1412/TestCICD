# ci-improved.yml
name: Pull Request Testing

on:
  pull_request:
    branches:
      - master
      - develop
      - preprod
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

env:
  NODE_VERSION: 22.11.0  # Updated to latest LTS
  YARN_ENABLE_IMMUTABLE_INSTALLS: false
  CI: true

# Global timeout for all jobs
defaults:
  run:
    shell: bash

jobs:
  # Pre-checks for early exit
  pre-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should_run: ${{ steps.changes.outputs.should_run }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for significant changes
        id: changes
        run: |
          # Skip CI for documentation-only changes
          if git diff --name-only HEAD~1 HEAD | grep -E '\.(js|jsx|ts|tsx|json|lock)$|android/|ios/' > /dev/null; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "Skipping CI - only documentation changes detected"
          fi

  # Main testing and validation (improved)
  test-and-validate:
    needs: pre-checks
    if: needs.pre-checks.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      pr_version: ${{ steps.version.outputs.version }}
      target_branch: ${{ steps.branch.outputs.name }}
      coverage: ${{ steps.coverage.outputs.percentage }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4  # Updated version
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      # Improved caching strategy
      - name: Cache Dependencies
        uses: actions/cache@v4  # Updated version
        with:
          path: |
            node_modules
            ~/.cache/yarn
            ~/.npm
            ios/Pods
          key: ${{ runner.os }}-deps-${{ hashFiles('yarn.lock', 'ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install Dependencies
        run: |
          yarn install --frozen-lockfile --prefer-offline
          # Pre-warm Metro cache
          yarn react-native start --reset-cache &
          sleep 5
          kill %1 || true

      - name: Generate PR Version
        id: version
        run: |
          PR_NUMBER=${{ github.event.number }}
          BASE_VERSION=$(node -p "require('./package.json').version")
          SHORT_SHA=$(git rev-parse --short HEAD)
          PR_VERSION="$BASE_VERSION-pr.$PR_NUMBER.$SHORT_SHA"
          echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
          echo "Generated PR version: $PR_VERSION"

      - name: Set Target Branch  
        id: branch
        run: |
          TARGET_BRANCH=${{ github.base_ref }}
          echo "name=$TARGET_BRANCH" >> $GITHUB_OUTPUT
          echo "Target branch: $TARGET_BRANCH"

      # Parallel quality checks
      - name: Code Quality Checks
        run: |
          echo "Running parallel quality checks..."
          
          # Run linting in background
          yarn lint --format=json --output-file=lint-results.json &
          LINT_PID=$!
          
          # Run type checking in background  
          yarn type-check --noEmit &
          TYPE_PID=$!
          
          # Wait for both to complete
          wait $LINT_PID
          LINT_EXIT=$?
          
          wait $TYPE_PID
          TYPE_EXIT=$?
          
          # Report results
          if [ $LINT_EXIT -eq 0 ]; then
            echo "✅ Linting passed"
          else
            echo "❌ Linting failed"
            exit 1
          fi
          
          if [ $TYPE_EXIT -eq 0 ]; then
            echo "✅ Type checking passed"  
          else
            echo "❌ Type checking failed"
            exit 1
          fi

      # Enhanced security audit
      - name: Security & Dependency Audit
        run: |
          echo "## 🔍 Security & Dependency Audit" >> $GITHUB_STEP_SUMMARY
          
          # Check for vulnerabilities
          if yarn audit --level moderate --json > audit-results.json 2>/dev/null; then
            echo "✅ No moderate+ security vulnerabilities" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            yarn audit --level moderate
          fi
          
          # Check for outdated packages
          OUTDATED=$(yarn outdated --json 2>/dev/null || echo '{}')
          echo "- **Outdated packages:** $(echo "$OUTDATED" | jq -r 'select(.type=="table") | .data | length // 0')" >> $GITHUB_STEP_SUMMARY

      # Simplified unit tests with better coverage
      - name: Unit & Integration Tests
        run: |
          # Run tests with coverage
          yarn test:ci --coverage --watchAll=false --passWithNoTests
          
          # Generate coverage badge
          if [ -f "coverage/coverage-summary.json" ]; then
            npx coverage-badges-cli --output coverage/badges
          fi

      - name: Extract Coverage
        id: coverage
        run: |
          COVERAGE="0"
          
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -p "
              try {
                const summary = require('./coverage/coverage-summary.json');
                Math.round(summary.total.lines.pct || 0);
              } catch(e) { 0; }
            ")
          fi
          
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Test coverage: $COVERAGE%"

      - name: Enhanced Coverage Report
        run: |
          echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          COVERAGE="${{ steps.coverage.outputs.percentage }}"
          echo "- **Line Coverage:** ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          
          # More detailed coverage info
          if [ -f "coverage/coverage-summary.json" ]; then
            BRANCHES=$(node -p "require('./coverage/coverage-summary.json').total.branches.pct || 0")
            FUNCTIONS=$(node -p "require('./coverage/coverage-summary.json').total.functions.pct || 0")
            STATEMENTS=$(node -p "require('./coverage/coverage-summary.json').total.statements.pct || 0")
            
            echo "- **Branch Coverage:** ${BRANCHES}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Function Coverage:** ${FUNCTIONS}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Statement Coverage:** ${STATEMENTS}%" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Coverage status with emoji
          if [ "$COVERAGE" = "0" ]; then
            echo "- **Status:** ⚠️ No tests found - consider adding unit tests" >> $GITHUB_STEP_SUMMARY
          elif [ "$COVERAGE" -ge 90 ]; then
            echo "- **Status:** 🎉 Excellent coverage!" >> $GITHUB_STEP_SUMMARY
          elif [ "$COVERAGE" -ge 80 ]; then
            echo "- **Status:** ✅ Good coverage" >> $GITHUB_STEP_SUMMARY
          elif [ "$COVERAGE" -ge 70 ]; then
            echo "- **Status:** 👍 Acceptable coverage" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** 📈 Consider improving coverage" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.event.number }}
          path: |
            coverage/
            lint-results.json
            jest-junit.xml
          retention-days: 7

  # Build testing for Android (improved)
  build-android-test:
    needs: [pre-checks, test-and-validate]
    if: needs.pre-checks.outputs.should_run == 'true'
    uses: ./.github/workflows/android-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.test-and-validate.outputs.pr_version }}
      version_code: "99"
      branch: ${{ needs.test-and-validate.outputs.target_branch }}
      cache_key: ${{ github.run_id }}-android
    secrets: inherit

  # Build testing for iOS (improved) 
  build-ios-test:
    needs: [pre-checks, test-and-validate]
    if: needs.pre-checks.outputs.should_run == 'true'
    uses: ./.github/workflows/ios-build.yml
    with:
      environment: debug
      publish: false
      version: ${{ needs.test-and-validate.outputs.pr_version }}
      version_code: "99"
      branch: ${{ needs.test-and-validate.outputs.target_branch }}
      cache_key: ${{ github.run_id }}-ios
    secrets: inherit

  # Simplified bundle analysis
  bundle-analysis:
    needs: [pre-checks, test-and-validate]
    if: needs.pre-checks.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 8
    continue-on-error: true
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Install Dependencies
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Bundle Size Analysis
        run: |
          echo "## 📦 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          
          start_time=$(date +%s)
          
          # Create production bundle
          if npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output android-bundle.js \
            --minify true; then
            
            bundle_size=$(ls -lh android-bundle.js | awk '{print $5}')
            bundle_bytes=$(wc -c < android-bundle.js)
            end_time=$(date +%s)
            build_time=$((end_time - start_time))
            
            echo "- **✅ Bundle Created:** Successfully" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Time:** ${build_time}s" >> $GITHUB_STEP_SUMMARY
            echo "- **Bundle Size:** $bundle_size" >> $GITHUB_STEP_SUMMARY
            
            # Size recommendations
            if [ "$bundle_bytes" -lt 2097152 ]; then # < 2MB
              echo "- **📊 Status:** 🎉 Excellent (< 2MB)" >> $GITHUB_STEP_SUMMARY
            elif [ "$bundle_bytes" -lt 5242880 ]; then # < 5MB
              echo "- **📊 Status:** ✅ Good (< 5MB)" >> $GITHUB_STEP_SUMMARY
            elif [ "$bundle_bytes" -lt 10485760 ]; then # < 10MB
              echo "- **📊 Status:** ⚠️ Large (< 10MB) - consider optimization" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **📊 Status:** ❌ Very Large (> 10MB) - optimization needed" >> $GITHUB_STEP_SUMMARY
              echo "- **💡 Suggestion:** Use `react-native-bundle-visualizer` to analyze" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Store bundle for artifact
            mkdir -p bundle-analysis
            mv android-bundle.js bundle-analysis/
          else
            echo "- **❌ Bundle Creation:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Bundle Analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-${{ github.event.number }}
          path: bundle-analysis/
          retention-days: 7

  # Performance testing (new addition)
  performance-test:
    needs: [pre-checks, test-and-validate]
    if: needs.pre-checks.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Metro Performance Test
        run: |
          echo "## ⚡ Performance Metrics" >> $GITHUB_STEP_SUMMARY
          
          # Test Metro bundler performance
          start_time=$(date +%s%3N)
          if timeout 60s npx react-native start --reset-cache & sleep 30; kill %1; then
            end_time=$(date +%s%3N)
            metro_time=$(( (end_time - start_time) / 1000 ))
            echo "- **Metro Start Time:** ${metro_time}s" >> $GITHUB_STEP_SUMMARY
            
            if [ "$metro_time" -lt 15 ]; then
              echo "- **Metro Performance:** 🚀 Fast" >> $GITHUB_STEP_SUMMARY
            elif [ "$metro_time" -lt 30 ]; then
              echo "- **Metro Performance:** ✅ Normal" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Metro Performance:** ⚠️ Slow" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Metro Performance:** ❌ Failed to start" >> $GITHUB_STEP_SUMMARY
          fi

  # Enhanced PR summary
  pr-summary:
    needs: [pre-checks, test-and-validate, build-android-test, build-ios-test, bundle-analysis, performance-test]
    if: always() && needs.pre-checks.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Comprehensive PR Summary
        run: |
          echo "## 🚀 Pull Request Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Version:** ${{ needs.test-and-validate.outputs.pr_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Branch:** ${{ needs.test-and-validate.outputs.target_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage:** ${{ needs.test-and-validate.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test Results
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality:** ${{ needs.test-and-validate.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests:** ${{ needs.test-and-validate.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Audit:** ${{ needs.test-and-validate.result == 'success' && '✅ Completed' || '⚠️ Issues' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build Results
          echo "### 📱 Build Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Android:** ${{ needs.build-android-test.result == 'success' && '✅ Success' || needs.build-android-test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **iOS:** ${{ needs.build-ios-test.result == 'success' && '✅ Success' || needs.build-ios-test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Analysis:** ${{ needs.bundle-analysis.result == 'success' && '✅ Completed' || '⚠️ Partial' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance:** ${{ needs.performance-test.result == 'success' && '✅ Good' || '⚠️ Check Required' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall Status
          TEST_OK="${{ needs.test-and-validate.result == 'success' }}"
          ANDROID_OK="${{ needs.build-android-test.result == 'success' || needs.build-android-test.result == 'skipped' }}"
          IOS_OK="${{ needs.build-ios-test.result == 'success' || needs.build-ios-test.result == 'skipped' }}"
          COVERAGE="${{ needs.test-and-validate.outputs.coverage }}"
          
          if [ "$TEST_OK" = "true" ] && [ "$ANDROID_OK" = "true" ] && [ "$IOS_OK" = "true" ]; then
            if [ "$COVERAGE" -ge 80 ]; then
              echo "### 🎉 Status: Ready to Merge!" >> $GITHUB_STEP_SUMMARY
              echo "All checks passed with excellent coverage." >> $GITHUB_STEP_SUMMARY
            elif [ "$COVERAGE" -ge 70 ]; then
              echo "### ✅ Status: Ready for Review" >> $GITHUB_STEP_SUMMARY
              echo "All checks passed with good coverage." >> $GITHUB_STEP_SUMMARY
            elif [ "$COVERAGE" -gt 0 ]; then
              echo "### ⚠️ Status: Ready but Low Coverage" >> $GITHUB_STEP_SUMMARY
              echo "Consider improving test coverage to 70%+." >> $GITHUB_STEP_SUMMARY
            else
              echo "### ⚠️ Status: Ready but No Tests" >> $GITHUB_STEP_SUMMARY
              echo "Consider adding unit tests for better quality assurance." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ❌ Status: Issues Detected" >> $GITHUB_STEP_SUMMARY
            echo "Please resolve failing checks before merging." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated at $(date)*" >> $GITHUB_STEP_SUMMARY

  # Notification job (optional)
  notify-result:
    needs: [pr-summary]
    if: always() && failure()
    runs-on: ubuntu-latest
    timeout-minutes: 2
    
    steps:
      - name: Notify on Failure
        run: |
          echo "CI failed for PR #${{ github.event.number }}"
          # Add Slack/Discord/Teams notification here if needed