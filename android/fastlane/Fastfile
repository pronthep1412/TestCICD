# android/fastlane/Fastfile - Fixed version management
default_platform(:android)

platform :android do
  
  #Setup และ Configuration
  before_all do
    ensure_bundle_exec
    apply_version_from_env if ENV['CI']
  end

  #Version Management
  private_lane :apply_version_from_env do
    version_name = ENV['VERSION_NAME'] || "1.0.0"
    version_code = ENV['VERSION_CODE'] || "1"
    
    UI.message("📋 Applying version from GitHub Actions workflow:")
    UI.message("   versionName: #{version_name}")
    UI.message("   versionCode: #{version_code}")
    UI.message("   Source: GitHub Actions (#{ENV['GITHUB_REF_NAME']})")
    
    gradle_file = "../app/build.gradle"
    
    # Update build.gradle
    sh("sed -i 's/versionName \".*\"/versionName \"#{version_name}\"/' #{gradle_file}")
    sh("sed -i 's/versionCode [0-9]*/versionCode #{version_code}/' #{gradle_file}")
    
    # Verify update
    gradle_content = File.read(gradle_file)
    actual_name = gradle_content.match(/versionName "([^"]+)"/)[1]
    actual_code = gradle_content.match(/versionCode (\d+)/)[1]
    
    UI.success("✅ Applied to build.gradle:")
    UI.success("   versionName \"#{actual_name}\"")
    UI.success("   versionCode #{actual_code}")
  end

  #สำหรับ Deployment Internal Testing
  lane :deploy_develop do
    UI.message("🚀 Deploying to Internal Testing...")
    build_and_deploy(
      track: 'internal',
      release_status: 'draft'
    )
  end

  #สำหรับ Deployment Alpha Testing
  lane :deploy_preprod do
    UI.message("🚀 Deploying to Alpha Testing...")
    build_and_deploy(
      track: 'alpha',
      release_status: 'draft'
    )
  end

  #สำหรับ Deployment Production
  lane :deploy_master do
    UI.message("🎉 Deploying to Production...")
    build_and_deploy(
      track: 'production',
      release_status: 'draft',
      # rollout: '0.1'  # 10% rollout for safety
    )
  end

  #สำหรับ Build แต่ไม่ deploy
  lane :build_only do
    UI.message("🔨 Building release bundle...")
    gradle(
      task: "clean bundleRelease",
      print_command: false
    )
    UI.success("✅ Build completed successfully!")
  end

  #Core deployment logic
  private_lane :build_and_deploy do |options|
    # Clean และ build
    gradle(
      task: "clean bundleRelease",
      print_command: false
    )
    
    # Upload to Play Store
    upload_to_play_store(
      track: options[:track],
      json_key: "google-play-key.json",
      aab: "app/build/outputs/bundle/release/app-release.aab",
      release_status: options[:release_status],
      rollout: options[:rollout],
      package_name: "test.cicd.appibc",
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      timeout: 300
    )
    
    UI.success("✅ Successfully uploaded to #{options[:track]} track!")
  end

  #Error handling
  error do |lane, exception|
    error_message = "❌ Android deployment failed in lane '#{lane}': #{exception.message}"
    UI.error(error_message)
    raise exception
  end
end