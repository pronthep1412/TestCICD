# android/fastlane/Fastfile - Fixed version management
default_platform(:android)

platform :android do
  
  before_all do
    ensure_bundle_exec
    auto_update_version if ENV['GITHUB_RUN_NUMBER']
  end

  # ‚ú® Fixed: Auto version management with proper Gradle manipulation
  private_lane :auto_update_version do
    begin
      # ‡∏î‡∏∂‡∏á version ‡∏à‡∏≤‡∏Å package.json
      package_json_path = File.expand_path('../../package.json')
      if File.exist?(package_json_path)
        package_json = JSON.parse(File.read(package_json_path))
        new_version = package_json['version']
      else
        UI.error("package.json not found, using default version")
        new_version = "1.0.0"
      end
      
      # ‡∏™‡∏£‡πâ‡∏≤‡∏á unique versionCode ‡∏à‡∏≤‡∏Å GitHub environment
      run_number = ENV['GITHUB_RUN_NUMBER'] ? ENV['GITHUB_RUN_NUMBER'].to_i : 1
      branch = ENV['GITHUB_REF_NAME'] || 'develop'
      
      # Base number ‡∏ï‡∏≤‡∏° branch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á version conflict
      base = case branch
             when 'master' then 2000000    # Production: 2M+
             when 'preprod' then 1500000   # PreProd: 1.5M+
             else 1000000                  # Develop: 1M+
             end
      
      version_code = base + run_number
      
      # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Android version ‡πÉ‡∏ô build.gradle ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ sed command
      gradle_file = "../app/build.gradle"
      
      # Update versionName
      sh("sed -i 's/versionName \".*\"/versionName \"#{new_version}\"/' #{gradle_file}")
      
      # Update versionCode  
      sh("sed -i 's/versionCode [0-9]*/versionCode #{version_code}/' #{gradle_file}")
      
      UI.success("‚úÖ Auto updated Android version:")
      UI.success("   versionName: #{new_version}")
      UI.success("   versionCode: #{version_code}")
      UI.success("   branch: #{branch}")
      
    rescue => e
      UI.error("‚ùå Failed to auto update version: #{e.message}")
      UI.error("Continuing with existing version...")
    end
  end

  # ‚ú® Alternative: Manual version management with increment_version_code
  lane :set_version do |options|
    version_name = options[:version_name] || prompt(text: "Enter version name (e.g., 1.2.3):")
    version_code = options[:version_code] || prompt(text: "Enter version code (e.g., 1000123):").to_i
    
    gradle_file = "../app/build.gradle"
    
    # Update using sed commands
    sh("sed -i 's/versionName \".*\"/versionName \"#{version_name}\"/' #{gradle_file}")
    sh("sed -i 's/versionCode [0-9]*/versionCode #{version_code}/' #{gradle_file}")
    
    UI.success("‚úÖ Manually set Android version:")
    UI.success("   versionName: #{version_name}")
    UI.success("   versionCode: #{version_code}")
  end

  # ‚ú® Fixed: Bump version using increment actions
  lane :bump_version do |options|
    type = options[:type] || "patch"  # patch, minor, major
    
    gradle_file = "../app/build.gradle"
    
    # ‡∏≠‡πà‡∏≤‡∏ô version ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å build.gradle
    gradle_content = File.read(gradle_file)
    
    current_version = gradle_content.match(/versionName "([^"]+)"/)[1]
    current_code = gradle_content.match(/versionCode (\d+)/)[1].to_i
    
    # Parse semantic version
    version_parts = current_version.split('.').map(&:to_i)
    
    case type
    when "major"
      version_parts[0] += 1
      version_parts[1] = 0
      version_parts[2] = 0
    when "minor"
      version_parts[1] += 1
      version_parts[2] = 0
    when "patch"
      version_parts[2] += 1
    end
    
    new_version = version_parts.join('.')
    new_code = current_code + 1
    
    # Update using sed commands
    sh("sed -i 's/versionName \".*\"/versionName \"#{new_version}\"/' #{gradle_file}")
    sh("sed -i 's/versionCode [0-9]*/versionCode #{new_code}/' #{gradle_file}")
    
    UI.success("‚úÖ Bumped #{type} version:")
    UI.success("   #{current_version} -> #{new_version}")
    UI.success("   versionCode: #{current_code} -> #{new_code}")
  end

  # üì± Alternative approach using increment_version_code action
  lane :increment_build do
    increment_version_code(
      gradle_file_path: "../app/build.gradle"
    )
    UI.success("‚úÖ Incremented version code")
  end

  # üöÄ Deployment lanes (‡πÄ‡∏î‡∏¥‡∏° + ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
  lane :deploy_develop do
    UI.message("üöÄ Deploying to Internal Testing...")
    build_and_deploy(
      track: 'internal',
      release_status: 'draft'
    )
    # notify_slack("üöÄ Android Development build deployed to Internal Testing!")
  end

  lane :deploy_preprod do
    UI.message("üöÄ Deploying to Alpha Testing...")
    build_and_deploy(
      track: 'alpha',
      release_status: 'draft'
    )
    # notify_slack("üöÄ Android Pre-production build deployed to Alpha!")
  end

  lane :deploy_master do
    UI.message("üéâ Deploying to Production...")
    build_and_deploy(
      track: 'production',
      release_status: 'draft',
      rollout: '0.1'  # 10% rollout for safety
    )
    # notify_slack("üéâ Android Production build deployed with 10% rollout!")
  end

  lane :build_only do
    UI.message("üî® Building release bundle...")
    gradle(
      task: "clean bundleRelease",
      print_command: false
    )
    UI.success("‚úÖ Build completed successfully!")
  end

  # üîß Private lanes
  private_lane :build_and_deploy do |options|
    # Clean ‡πÅ‡∏•‡∏∞ build
    gradle(
      task: "clean bundleRelease",
      print_command: false
    )
    
    # Upload to Play Store
    upload_to_play_store(
      track: options[:track],
      json_key: "google-play-key.json",
      aab: "app/build/outputs/bundle/release/app-release.aab",
      release_status: options[:release_status],
      rollout: options[:rollout],
      package_name: "test.cicd.appibc",
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      timeout: 300
    )
    
    UI.success("‚úÖ Successfully uploaded to #{options[:track]} track!")
  end

  private_lane :notify_slack do |message|
    return unless ENV["SLACK_URL"]
    
    begin
      slack(
        message: message,
        channel: "#releases",
        webhook_url: ENV["SLACK_URL"],
        username: "Android CI/CD",
        icon_emoji: ":robot_face:"
      )
    rescue => e
      UI.error("Failed to send Slack notification: #{e.message}")
    end
  end

  # Error handling
  error do |lane, exception|
    error_message = "‚ùå Android deployment failed in lane '#{lane}': #{exception.message}"
    UI.error(error_message)
    # notify_slack(error_message) if defined?(notify_slack)
    raise exception
  end
end